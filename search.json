[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/pyspark-blog/danl_320_hw1_blog_post.html",
    "href": "posts/pyspark-blog/danl_320_hw1_blog_post.html",
    "title": "PySpark Basics",
    "section": "",
    "text": "Hadoop provides storage and ways to easily process big data sets. Storage is managed by the Hadoop Distributed File System (HDFS), and the data is processed using MapReduce.  - HDFS divides up data from multiple sources and distributes them across different servers to be processed.The computing environment is redundant, allowing the application to run if a server fails.  - MapReduce distributes data across multiple machines and the brings the processed data back together so it’s coherent.\nHadoop has its limits, however. Data cannot be processed in real time. It can only collect data for a certain period of time and then process it all at once. This process is called batch processing."
  },
  {
    "objectID": "posts/pyspark-blog/danl_320_hw1_blog_post.html#pyspark-in-google-colab",
    "href": "posts/pyspark-blog/danl_320_hw1_blog_post.html#pyspark-in-google-colab",
    "title": "PySpark Basics",
    "section": "PySpark in Google Colab",
    "text": "PySpark in Google Colab\nPySpark is very similar to Pandas. It is very convenient to transform data just like we learned before, just with a slightly different syntax. Here are the basics of coding with PySpark: \n\nLoading Data \nEvery time you use PySpark, you must establish a SparkSession entry point. This allows you to transform DataFrames and SQL tables.\n\nimport pyspark\nfrom pyspark.sql import SparkSession\nspark = SparkSession.builder.master(\"local[*]\").getOrCreate()\n\nThere are two ways to approach reading a CSV file. First, if the file is in your local directory, follow this syntax that is similar to Pandas:\n\npath = '/content/drive/MyDrive/lecture-data/cces.csv'\ndf = spark.read.csv(path,\n                    inferSchema=True,\n                    header=True)\ndf.show()\n\n\nNote: in order to see any display of a DataFrame at any point while you’re working with it, you must use .show(). \n\nSecond, if the file is from a URL, you have to create a Pandas DataFrame first. From there, you can convert the Pandas DataFrame into a Spark DataFrame.\n\nimport pandas as pd\ndf_pd = pd.read_csv('https://bcdanl.github.io/data/nba.csv')\n\ndf = spark.createDataFrame(df_pd)\ndf.show()\n\n+---------------+--------------------+--------+--------+--------+\n|           Name|                Team|Position|Birthday|  Salary|\n+---------------+--------------------+--------+--------+--------+\n|   Shake Milton|  Philadelphia 76ers|      SG| 9/26/96| 1445697|\n| Christian Wood|     Detroit Pistons|      PF| 9/27/95| 1645357|\n|  PJ Washington|   Charlotte Hornets|      PF| 8/23/98| 3831840|\n|   Derrick Rose|     Detroit Pistons|      PG| 10/4/88| 7317074|\n|  Marial Shayok|  Philadelphia 76ers|       G| 7/26/95|   79568|\n| Draymond Green|Golden State Warr...|      PF|  3/4/90|18539130|\n|  Kendrick Nunn|          Miami Heat|      SG|  8/3/95| 1416852|\n|     Cedi Osman| Cleveland Cavaliers|      SF|  4/8/95| 2907143|\n|    Brook Lopez|     Milwaukee Bucks|       C|  4/1/88|12093024|\n|   Torrey Craig|      Denver Nuggets|      SF|12/19/90| 2000000|\n|Jordan Clarkson| Cleveland Cavaliers|      PG|  6/7/92|13437500|\n|    Alex Caruso|  Los Angeles Lakers|      PG| 2/28/94| 2750000|\n|   Norvel Pelle|  Philadelphia 76ers|      FC|  2/3/93|   79568|\n|  Tyler Johnson|        Phoenix Suns|      PG|  5/7/92|19245370|\n|     Alec Burks|Golden State Warr...|      SG| 7/20/91| 2320044|\n| JaMychal Green|Los Angeles Clippers|      PF| 6/21/90| 4767000|\n|  Dwight Howard|  Los Angeles Lakers|       C| 12/8/85| 5603850|\n|   Nikola Jokic|      Denver Nuggets|       C| 2/19/95|27504630|\n|  Chris Boucher|     Toronto Raptors|      PF| 1/11/93| 1588231|\n|  Marcus Morris|     New York Knicks|      PF|  9/2/89|15000000|\n+---------------+--------------------+--------+--------+--------+\nonly showing top 20 rows\n\n\n\n\n\nSummarizing Data \n\ndf.printSchema() prints column names and data types \n\nthe argument, nullable = True allows columns with a null value to print\n\ndf.columns prints list of columns \ndf.dtypes returns a list of tuples containing the column name and data type \ndf.count() prints the total number of rows \ndf.describe() prints summary statistics for each column \n\n\n\nDisplaying Data \n\ndf.show(): default shows the first 20 rows \n\narguments: \n\n\nn = : number of rows to display \ntruncate = : either boolean value, or a number specifying how many characters to keep \nvertical = : boolean value; if True, each row is displayed vertically \n\n\n\n\nSelecting Columns \nSelecting one column:\n\ndf.select(\"Name\").show(5)\n\n+--------------+\n|          Name|\n+--------------+\n|  Shake Milton|\n|Christian Wood|\n| PJ Washington|\n|  Derrick Rose|\n| Marial Shayok|\n+--------------+\nonly showing top 5 rows\n\n\n\nSelecting multiple columns:\n\ndf.select(\"Name\", \"Team\", \"Salary\").show(5)\n\n+--------------+------------------+-------+\n|          Name|              Team| Salary|\n+--------------+------------------+-------+\n|  Shake Milton|Philadelphia 76ers|1445697|\n|Christian Wood|   Detroit Pistons|1645357|\n| PJ Washington| Charlotte Hornets|3831840|\n|  Derrick Rose|   Detroit Pistons|7317074|\n| Marial Shayok|Philadelphia 76ers|  79568|\n+--------------+------------------+-------+\nonly showing top 5 rows\n\n\n\n\n\nCounting Methods \nLike previously mentioned, you can use df.count() for a count of the entire DataFrame. You can also count specific columns. Here are two ways to do this: \n\nfrom pyspark.sql.functions import countDistinct\nnum_teams = df.select(countDistinct(\"Team\")).collect()[0][0]\nnum_teams\n\n30\n\n\nThis code shows the number of observations of the unique values in the Team column.\n\ndf.groupBy(\"Team\").count().show(5)\n\n+--------------------+-----+\n|                Team|count|\n+--------------------+-----+\n|        Phoenix Suns|   15|\n|      Boston Celtics|   16|\n|    Dallas Mavericks|   13|\n|New Orleans Pelicans|   16|\n|       Brooklyn Nets|   17|\n+--------------------+-----+\nonly showing top 5 rows\n\n\n\nThis code shows how many times each unique value in Team occurrs. \n\n\nSorting \n\ndf.orderBy() sorts values by a variable given. It can be given ascending/descending intstructions. Sorting by multiple columns requires the use of a list.\n\n\ndf.orderBy(\"Name\").show(5)\n\n+-----------------+--------------------+--------+--------+--------+\n|             Name|                Team|Position|Birthday|  Salary|\n+-----------------+--------------------+--------+--------+--------+\n|     Aaron Gordon|       Orlando Magic|      PF| 9/16/95|19863636|\n|    Aaron Holiday|      Indiana Pacers|      PG| 9/30/96| 2239200|\n|      Abdel Nader|Oklahoma City Thu...|      SF| 9/25/93| 1618520|\n|      Adam Mokoka|       Chicago Bulls|       G| 7/18/98|   79568|\n|Admiral Schofield|  Washington Wizards|      SF| 3/30/97| 1000000|\n+-----------------+--------------------+--------+--------+--------+\nonly showing top 5 rows\n\n\n\nThe default sorting is ascending.\n\nfrom pyspark.sql.functions import desc\ndf.orderBy(desc(\"Salary\")).show(5)\n\n+-----------------+--------------------+--------+--------+--------+\n|             Name|                Team|Position|Birthday|  Salary|\n+-----------------+--------------------+--------+--------+--------+\n|    Stephen Curry|Golden State Warr...|      PG| 3/14/88|40231758|\n|Russell Westbrook|     Houston Rockets|      PG|11/12/88|38506482|\n|       Chris Paul|Oklahoma City Thu...|      PG|  5/6/85|38506482|\n|        John Wall|  Washington Wizards|      PG|  9/6/90|38199000|\n|     James Harden|     Houston Rockets|      PG| 8/26/89|38199000|\n+-----------------+--------------------+--------+--------+--------+\nonly showing top 5 rows\n\n\n\n\ndf.orderBy([\"Team\", desc(\"Salary\")]).show(5)\n\n+----------------+-------------+--------+--------+--------+\n|            Name|         Team|Position|Birthday|  Salary|\n+----------------+-------------+--------+--------+--------+\n|Chandler Parsons|Atlanta Hawks|      SF|10/25/88|25102512|\n|     Evan Turner|Atlanta Hawks|      PG|10/27/88|18606556|\n|    Allen Crabbe|Atlanta Hawks|      SG|  4/9/92|18500000|\n| De'Andre Hunter|Atlanta Hawks|      SF| 12/2/97| 7068360|\n|   Jabari Parker|Atlanta Hawks|      PF| 3/15/95| 6500000|\n+----------------+-------------+--------+--------+--------+\nonly showing top 5 rows\n\n\n\n\nnsmallest and nlargest are not functions in PySpark, but there is an equivalent way to do it:\n\n\n# nsmallest example:\ndf.orderBy(\"Salary\").limit(5).show()\n\n# nlargest example:\ndf.orderBy(desc(\"Salary\")).limit(5).show()\n\n\n\nRow-Based Access \nPySpark does not use row indexing, so you have to use other ways to access rows:  1. df.limit() or df.take() takes an integer and returns a list of the number of rows  2. df.collect() returns all the reconds as a list of rows  Here is an example:\n\ndf.filter(\"Team == 'New York Knicks'\").show()\ndf.limit(5).show()\ndf.take(5)\ndf.collect()\n\n+-----------------+---------------+--------+--------+--------+\n|             Name|           Team|Position|Birthday|  Salary|\n+-----------------+---------------+--------+--------+--------+\n|    Marcus Morris|New York Knicks|      PF|  9/2/89|15000000|\n|   Damyean Dotson|New York Knicks|      SG|  5/6/94| 1618520|\n| Ignas Brazdeikis|New York Knicks|      SF|  1/8/99|  898310|\n|        Ivan Rabb|New York Knicks|      PF|  2/4/97|   79568|\n|       Kevin Knox|New York Knicks|      PF| 8/11/99| 4380120|\n|    Julius Randle|New York Knicks|       C|11/29/94|18000000|\n|Mitchell Robinson|New York Knicks|       C|  4/1/98| 1559712|\n|  Wayne Ellington|New York Knicks|      SG|11/29/87| 8000000|\n|       RJ Barrett|New York Knicks|      SG| 6/14/00| 7839960|\n|    Elfrid Payton|New York Knicks|      PG| 2/22/94| 8000000|\n|    Allonzo Trier|New York Knicks|      PG| 1/17/96| 3551100|\n|   Reggie Bullock|New York Knicks|      SF| 3/16/91| 4000000|\n|     Bobby Portis|New York Knicks|       C| 2/10/95|15000000|\n|       Taj Gibson|New York Knicks|       C| 6/24/85| 9000000|\n|  Frank Ntilikina|New York Knicks|      PG| 7/28/98| 4855800|\n|     Kadeem Allen|New York Knicks|      PG| 1/15/93|   79568|\n+-----------------+---------------+--------+--------+--------+\n\n+--------------+------------------+--------+--------+-------+\n|          Name|              Team|Position|Birthday| Salary|\n+--------------+------------------+--------+--------+-------+\n|  Shake Milton|Philadelphia 76ers|      SG| 9/26/96|1445697|\n|Christian Wood|   Detroit Pistons|      PF| 9/27/95|1645357|\n| PJ Washington| Charlotte Hornets|      PF| 8/23/98|3831840|\n|  Derrick Rose|   Detroit Pistons|      PG| 10/4/88|7317074|\n| Marial Shayok|Philadelphia 76ers|       G| 7/26/95|  79568|\n+--------------+------------------+--------+--------+-------+\n\n\n\n[Row(Name='Shake Milton', Team='Philadelphia 76ers', Position='SG', Birthday='9/26/96', Salary=1445697),\n Row(Name='Christian Wood', Team='Detroit Pistons', Position='PF', Birthday='9/27/95', Salary=1645357),\n Row(Name='PJ Washington', Team='Charlotte Hornets', Position='PF', Birthday='8/23/98', Salary=3831840),\n Row(Name='Derrick Rose', Team='Detroit Pistons', Position='PG', Birthday='10/4/88', Salary=7317074),\n Row(Name='Marial Shayok', Team='Philadelphia 76ers', Position='G', Birthday='7/26/95', Salary=79568),\n Row(Name='Draymond Green', Team='Golden State Warriors', Position='PF', Birthday='3/4/90', Salary=18539130),\n Row(Name='Kendrick Nunn', Team='Miami Heat', Position='SG', Birthday='8/3/95', Salary=1416852),\n Row(Name='Cedi Osman', Team='Cleveland Cavaliers', Position='SF', Birthday='4/8/95', Salary=2907143),\n Row(Name='Brook Lopez', Team='Milwaukee Bucks', Position='C', Birthday='4/1/88', Salary=12093024),\n Row(Name='Torrey Craig', Team='Denver Nuggets', Position='SF', Birthday='12/19/90', Salary=2000000),\n Row(Name='Jordan Clarkson', Team='Cleveland Cavaliers', Position='PG', Birthday='6/7/92', Salary=13437500),\n Row(Name='Alex Caruso', Team='Los Angeles Lakers', Position='PG', Birthday='2/28/94', Salary=2750000),\n Row(Name='Norvel Pelle', Team='Philadelphia 76ers', Position='FC', Birthday='2/3/93', Salary=79568),\n Row(Name='Tyler Johnson', Team='Phoenix Suns', Position='PG', Birthday='5/7/92', Salary=19245370),\n Row(Name='Alec Burks', Team='Golden State Warriors', Position='SG', Birthday='7/20/91', Salary=2320044),\n Row(Name='JaMychal Green', Team='Los Angeles Clippers', Position='PF', Birthday='6/21/90', Salary=4767000),\n Row(Name='Dwight Howard', Team='Los Angeles Lakers', Position='C', Birthday='12/8/85', Salary=5603850),\n Row(Name='Nikola Jokic', Team='Denver Nuggets', Position='C', Birthday='2/19/95', Salary=27504630),\n Row(Name='Chris Boucher', Team='Toronto Raptors', Position='PF', Birthday='1/11/93', Salary=1588231),\n Row(Name='Marcus Morris', Team='New York Knicks', Position='PF', Birthday='9/2/89', Salary=15000000),\n Row(Name='Kevin Huerter', Team='Atlanta Hawks', Position='SG', Birthday='8/27/98', Salary=2636280),\n Row(Name='Rui Hachimura', Team='Washington Wizards', Position='PF', Birthday='2/8/98', Salary=4469160),\n Row(Name='George Hill', Team='Milwaukee Bucks', Position='PG', Birthday='5/4/86', Salary=10133907),\n Row(Name='Nickeil Alexander-Walker', Team='New Orleans Pelicans', Position='SG', Birthday='9/2/98', Salary=2964840),\n Row(Name='Jaylen Hoard', Team='Portland Trail Blazers', Position='SF', Birthday='3/30/99', Salary=79568),\n Row(Name='Tyler Cook', Team='Cleveland Cavaliers', Position='PF', Birthday='9/23/97', Salary=79568),\n Row(Name='Otto Porter', Team='Chicago Bulls', Position='SF', Birthday='6/3/93', Salary=27250576),\n Row(Name='Langston Galloway', Team='Detroit Pistons', Position='PG', Birthday='12/9/91', Salary=7333333),\n Row(Name='Evan Turner', Team='Atlanta Hawks', Position='PG', Birthday='10/27/88', Salary=18606556),\n Row(Name='Norman Powell', Team='Toronto Raptors', Position='SG', Birthday='5/25/93', Salary=10116576),\n Row(Name='Nicolas Claxton', Team='Brooklyn Nets', Position='PF', Birthday='4/17/99', Salary=898310),\n Row(Name='Michael Frazier', Team='Houston Rockets', Position='G', Birthday='3/8/94', Salary=79568),\n Row(Name='Paul Millsap', Team='Denver Nuggets', Position='PF', Birthday='2/10/85', Salary=30000000),\n Row(Name='Furkan Korkmaz', Team='Philadelphia 76ers', Position='SG', Birthday='7/24/97', Salary=1620564),\n Row(Name='Trey Burke', Team='Philadelphia 76ers', Position='PG', Birthday='11/12/92', Salary=2028594),\n Row(Name='Bradley Beal', Team='Washington Wizards', Position='SG', Birthday='6/28/93', Salary=27093018),\n Row(Name='Thomas Bryant', Team='Washington Wizards', Position='C', Birthday='7/31/97', Salary=8000000),\n Row(Name='Dean Wade', Team='Cleveland Cavaliers', Position='PF', Birthday='11/20/96', Salary=79568),\n Row(Name='Chris Paul', Team='Oklahoma City Thunder', Position='PG', Birthday='5/6/85', Salary=38506482),\n Row(Name='Josh Hart', Team='New Orleans Pelicans', Position='SF', Birthday='3/6/95', Salary=1934160),\n Row(Name='LaMarcus Aldridge', Team='San Antonio Spurs', Position='C', Birthday='7/19/85', Salary=26000000),\n Row(Name='DaQuan Jeffries', Team='Sacramento Kings', Position='SG', Birthday='8/30/97', Salary=898310),\n Row(Name='Hamidou Diallo', Team='Oklahoma City Thunder', Position='SF', Birthday='7/31/98', Salary=1416852),\n Row(Name='Jamal Murray', Team='Denver Nuggets', Position='PG', Birthday='2/23/97', Salary=4444746),\n Row(Name='Darius Bazley', Team='Oklahoma City Thunder', Position='PF', Birthday='6/12/00', Salary=2284800),\n Row(Name='Robert Franks', Team='Charlotte Hornets', Position='F', Birthday='12/18/96', Salary=79568),\n Row(Name='Gerald Green', Team='Houston Rockets', Position='SF', Birthday='1/26/86', Salary=2564753),\n Row(Name='Thaddeus Young', Team='Chicago Bulls', Position='PF', Birthday='6/21/88', Salary=12900000),\n Row(Name='Sviatoslav Mykhailiuk', Team='Detroit Pistons', Position='SF', Birthday='6/10/97', Salary=1416852),\n Row(Name='Ian Mahinmi', Team='Washington Wizards', Position='C', Birthday='11/5/86', Salary=15450051),\n Row(Name='Deonte Burton', Team='Oklahoma City Thunder', Position='SG', Birthday='1/31/94', Salary=1416852),\n Row(Name='Markelle Fultz', Team='Orlando Magic', Position='PG', Birthday='5/29/98', Salary=9745200),\n Row(Name='Aaron Gordon', Team='Orlando Magic', Position='PF', Birthday='9/16/95', Salary=19863636),\n Row(Name='Dzanan Musa', Team='Brooklyn Nets', Position='SF', Birthday='5/8/99', Salary=1911600),\n Row(Name='Patrick McCaw', Team='Toronto Raptors', Position='SF', Birthday='10/25/95', Salary=4000000),\n Row(Name='Bismack Biyombo', Team='Charlotte Hornets', Position='C', Birthday='8/28/92', Salary=17000000),\n Row(Name='JaVale McGee', Team='Los Angeles Lakers', Position='C', Birthday='1/19/88', Salary=4000000),\n Row(Name='Juwan Morgan', Team='Utah Jazz', Position='F', Birthday='4/17/97', Salary=796806),\n Row(Name='Marc Gasol', Team='Toronto Raptors', Position='C', Birthday='1/29/85', Salary=25595700),\n Row(Name='Marcus Smart', Team='Boston Celtics', Position='PG', Birthday='3/6/94', Salary=12553571),\n Row(Name='Rudy Gobert', Team='Utah Jazz', Position='C', Birthday='6/26/92', Salary=24258427),\n Row(Name='Wesley Iwundu', Team='Orlando Magic', Position='SF', Birthday='12/20/94', Salary=1618520),\n Row(Name='Dwight Powell', Team='Dallas Mavericks', Position='C', Birthday='7/20/91', Salary=10259375),\n Row(Name='Goran Dragic', Team='Miami Heat', Position='PG', Birthday='5/6/86', Salary=19217900),\n Row(Name='Theo Pinson', Team='Brooklyn Nets', Position='SG', Birthday='11/5/95', Salary=1445697),\n Row(Name='Danilo Gallinari', Team='Oklahoma City Thunder', Position='PF', Birthday='8/8/88', Salary=22615559),\n Row(Name='Joe Ingles', Team='Utah Jazz', Position='PF', Birthday='10/2/87', Salary=11454546),\n Row(Name='Jarrett Culver', Team='Minnesota Timberwolves', Position='SG', Birthday='2/20/99', Salary=5813640),\n Row(Name='Robert Covington', Team='Minnesota Timberwolves', Position='PF', Birthday='12/14/90', Salary=11301219),\n Row(Name='Damyean Dotson', Team='New York Knicks', Position='SG', Birthday='5/6/94', Salary=1618520),\n Row(Name='Patrick Beverley', Team='Los Angeles Clippers', Position='PG', Birthday='7/12/88', Salary=12345680),\n Row(Name='Kevin Love', Team='Cleveland Cavaliers', Position='C', Birthday='9/7/88', Salary=28942830),\n Row(Name='Quinn Cook', Team='Los Angeles Lakers', Position='PG', Birthday='3/23/93', Salary=3000000),\n Row(Name='Justin Wright-Foreman', Team='Utah Jazz', Position='G', Birthday='10/27/97', Salary=79568),\n Row(Name='Noah Vonleh', Team='Minnesota Timberwolves', Position='C', Birthday='8/24/95', Salary=2000000),\n Row(Name='Tyus Jones', Team='Memphis Grizzlies', Position='PG', Birthday='5/10/96', Salary=9258000),\n Row(Name='Dewayne Dedmon', Team='Sacramento Kings', Position='C', Birthday='8/12/89', Salary=13333334),\n Row(Name='Malcolm Brogdon', Team='Indiana Pacers', Position='PG', Birthday='12/11/92', Salary=20000000),\n Row(Name='Ben McLemore', Team='Houston Rockets', Position='SG', Birthday='2/11/93', Salary=2028594),\n Row(Name='Wilson Chandler', Team='Brooklyn Nets', Position='PF', Birthday='5/10/87', Salary=2564753),\n Row(Name='Isaac Bonga', Team='Washington Wizards', Position='PG', Birthday='11/8/99', Salary=1416852),\n Row(Name='Adam Mokoka', Team='Chicago Bulls', Position='G', Birthday='7/18/98', Salary=79568),\n Row(Name='Lonzo Ball', Team='New Orleans Pelicans', Position='PG', Birthday='10/27/97', Salary=8719320),\n Row(Name='Jalen Brunson', Team='Dallas Mavericks', Position='PG', Birthday='8/31/96', Salary=1416852),\n Row(Name='John Collins', Team='Atlanta Hawks', Position='PF', Birthday='9/23/97', Salary=2686560),\n Row(Name='Marvin Williams', Team='Charlotte Hornets', Position='PF', Birthday='6/19/86', Salary=15006250),\n Row(Name='Brad Wanamaker', Team='Boston Celtics', Position='PG', Birthday='7/25/89', Salary=1445697),\n Row(Name='Donte DiVincenzo', Team='Milwaukee Bucks', Position='SG', Birthday='1/31/97', Salary=2905800),\n Row(Name='Omari Spellman', Team='Golden State Warriors', Position='PF', Birthday='7/21/97', Salary=1897800),\n Row(Name='Joe Harris', Team='Brooklyn Nets', Position='SF', Birthday='9/6/91', Salary=7666667),\n Row(Name=\"Royce O'Neale\", Team='Utah Jazz', Position='PF', Birthday='6/5/93', Salary=1618520),\n Row(Name='Deandre Ayton', Team='Phoenix Suns', Position='C', Birthday='7/23/98', Salary=9562920),\n Row(Name='Cory Joseph', Team='Sacramento Kings', Position='PG', Birthday='8/20/91', Salary=12000000),\n Row(Name='Malcolm Miller', Team='Toronto Raptors', Position='SF', Birthday='3/6/93', Salary=1588231),\n Row(Name='Justise Winslow', Team='Miami Heat', Position='PF', Birthday='3/26/96', Salary=13000000),\n Row(Name='Kevin Durant', Team='Brooklyn Nets', Position='PF', Birthday='9/29/88', Salary=37199000),\n Row(Name='Evan Fournier', Team='Orlando Magic', Position='SF', Birthday='10/29/92', Salary=17000000),\n Row(Name='Chris Silva', Team='Miami Heat', Position='PF', Birthday='9/19/96', Salary=79568),\n Row(Name='Vince Carter', Team='Atlanta Hawks', Position='PF', Birthday='1/26/77', Salary=2564753),\n Row(Name='Cody Zeller', Team='Charlotte Hornets', Position='C', Birthday='10/5/92', Salary=14471910),\n Row(Name='Brian Bowen', Team='Indiana Pacers', Position='SG', Birthday='10/2/98', Salary=79568),\n Row(Name='Aaron Holiday', Team='Indiana Pacers', Position='PG', Birthday='9/30/96', Salary=2239200),\n Row(Name='Troy Daniels', Team='Los Angeles Lakers', Position='SG', Birthday='7/15/91', Salary=2028594),\n Row(Name='Buddy Hield', Team='Sacramento Kings', Position='SG', Birthday='12/17/92', Salary=4861207),\n Row(Name='Terance Mann', Team='Los Angeles Clippers', Position='SG', Birthday='10/18/96', Salary=1000000),\n Row(Name='John Konchar', Team='Memphis Grizzlies', Position='SG', Birthday='3/22/96', Salary=79568),\n Row(Name='KZ Okpala', Team='Miami Heat', Position='SF', Birthday='4/28/99', Salary=898310),\n Row(Name='Denzel Valentine', Team='Chicago Bulls', Position='SF', Birthday='11/16/93', Salary=3377568),\n Row(Name='Marquese Chriss', Team='Golden State Warriors', Position='PF', Birthday='7/2/97', Salary=1678854),\n Row(Name='Anthony Davis', Team='Los Angeles Lakers', Position='C', Birthday='3/11/93', Salary=27093019),\n Row(Name='Nemanja Bjelica', Team='Sacramento Kings', Position='PF', Birthday='5/9/88', Salary=6825000),\n Row(Name='Chandler Parsons', Team='Atlanta Hawks', Position='SF', Birthday='10/25/88', Salary=25102512),\n Row(Name='Courtney Lee', Team='Dallas Mavericks', Position='SG', Birthday='10/3/85', Salary=12759670),\n Row(Name='Myles Turner', Team='Indiana Pacers', Position='C', Birthday='3/24/96', Salary=18000000),\n Row(Name=\"Kyle O'Quinn\", Team='Philadelphia 76ers', Position='C', Birthday='3/26/90', Salary=2174318),\n Row(Name='Bryn Forbes', Team='San Antonio Spurs', Position='SG', Birthday='7/23/93', Salary=2875000),\n Row(Name='Duncan Robinson', Team='Miami Heat', Position='PF', Birthday='4/22/94', Salary=1416852),\n Row(Name='Devin Booker', Team='Phoenix Suns', Position='SG', Birthday='10/30/96', Salary=27285000),\n Row(Name='Grant Williams', Team='Boston Celtics', Position='PF', Birthday='11/30/98', Salary=2379840),\n Row(Name='DeMarcus Cousins', Team='Los Angeles Lakers', Position='C', Birthday='8/13/90', Salary=3500000),\n Row(Name='DeMar DeRozan', Team='San Antonio Spurs', Position='SF', Birthday='8/7/89', Salary=27739975),\n Row(Name='Kristaps Porzingis', Team='Dallas Mavericks', Position='PF', Birthday='8/2/95', Salary=27285000),\n Row(Name='Brandon Knight', Team='Cleveland Cavaliers', Position='PG', Birthday='12/2/91', Salary=15643750),\n Row(Name='Thabo Sefolosha', Team='Houston Rockets', Position='PF', Birthday='5/2/84', Salary=2564753),\n Row(Name='David Nwaba', Team='Brooklyn Nets', Position='SF', Birthday='1/14/93', Salary=1678854),\n Row(Name='Quinndary Weatherspoon', Team='San Antonio Spurs', Position='G', Birthday='9/10/96', Salary=79568),\n Row(Name='Dewan Hernandez', Team='Toronto Raptors', Position='C', Birthday='12/9/96', Salary=898310),\n Row(Name='Isaiah Thomas', Team='Washington Wizards', Position='PG', Birthday='2/7/89', Salary=2320044),\n Row(Name='Bruce Brown', Team='Detroit Pistons', Position='SG', Birthday='8/15/96', Salary=1416852),\n Row(Name='Keldon Johnson', Team='San Antonio Spurs', Position='SF', Birthday='10/11/99', Salary=1950600),\n Row(Name='Damian Jones', Team='Atlanta Hawks', Position='C', Birthday='6/30/95', Salary=2305057),\n Row(Name='Luguentz Dort', Team='Oklahoma City Thunder', Position='G', Birthday='4/19/99', Salary=79568),\n Row(Name='Terence Davis', Team='Toronto Raptors', Position='SG', Birthday='5/16/97', Salary=898310),\n Row(Name='Chandler Hutchison', Team='Chicago Bulls', Position='SF', Birthday='4/26/96', Salary=2332320),\n Row(Name='Steven Adams', Team='Oklahoma City Thunder', Position='C', Birthday='7/20/93', Salary=25842697),\n Row(Name='Jordan Poole', Team='Golden State Warriors', Position='SG', Birthday='6/19/99', Salary=1964760),\n Row(Name='Sekou Doumbouya', Team='Detroit Pistons', Position='SF', Birthday='12/23/00', Salary=3285120),\n Row(Name='Zion Williamson', Team='New Orleans Pelicans', Position='F', Birthday='7/6/00', Salary=9757440),\n Row(Name='Mike Muscala', Team='Oklahoma City Thunder', Position='C', Birthday='7/1/91', Salary=2028594),\n Row(Name='Skal Labissiere', Team='Portland Trail Blazers', Position='C', Birthday='3/18/96', Salary=2338846),\n Row(Name='Meyers Leonard', Team='Miami Heat', Position='C', Birthday='2/27/92', Salary=11286515),\n Row(Name='Reggie Jackson', Team='Detroit Pistons', Position='PG', Birthday='4/16/90', Salary=18086956),\n Row(Name='Alfonzo McKinnie', Team='Cleveland Cavaliers', Position='SF', Birthday='9/17/92', Salary=1588231),\n Row(Name='Yuta Watanabe', Team='Memphis Grizzlies', Position='SF', Birthday='10/13/94', Salary=79568),\n Row(Name='Kentavious Caldwell-Pope', Team='Los Angeles Lakers', Position='SG', Birthday='2/18/93', Salary=8089282),\n Row(Name='Kelan Martin', Team='Minnesota Timberwolves', Position='SF', Birthday='8/3/95', Salary=79568),\n Row(Name='OG Anunoby', Team='Toronto Raptors', Position='SF', Birthday='7/17/97', Salary=2281800),\n Row(Name='Tyler Herro', Team='Miami Heat', Position='SG', Birthday='1/20/00', Salary=3640200),\n Row(Name='Richaun Holmes', Team='Sacramento Kings', Position='C', Birthday='10/15/93', Salary=4767000),\n Row(Name='Tyson Chandler', Team='Houston Rockets', Position='C', Birthday='10/2/82', Salary=2564753),\n Row(Name='Solomon Hill', Team='Memphis Grizzlies', Position='SF', Birthday='3/18/91', Salary=13290395),\n Row(Name='Keita Bates-Diop', Team='Minnesota Timberwolves', Position='SF', Birthday='1/23/96', Salary=1416852),\n Row(Name='Kelly Olynyk', Team='Miami Heat', Position='C', Birthday='4/19/91', Salary=12667885),\n Row(Name='Jaxson Hayes', Team='New Orleans Pelicans', Position='C', Birthday='5/23/00', Salary=4862040),\n Row(Name='CJ McCollum', Team='Portland Trail Blazers', Position='SG', Birthday='9/19/91', Salary=27556959),\n Row(Name='Darius Miller', Team='New Orleans Pelicans', Position='SF', Birthday='3/21/90', Salary=7250000),\n Row(Name='Luka Doncic', Team='Dallas Mavericks', Position='PG', Birthday='2/28/99', Salary=7683360),\n Row(Name='DeMarre Carroll', Team='San Antonio Spurs', Position='PF', Birthday='7/27/86', Salary=7000000),\n Row(Name='Cristiano Felicio', Team='Chicago Bulls', Position='C', Birthday='7/7/92', Salary=8156500),\n Row(Name='Zach LaVine', Team='Chicago Bulls', Position='PG', Birthday='3/10/95', Salary=19500000),\n Row(Name='Tremont Waters', Team='Boston Celtics', Position='PG', Birthday='1/10/98', Salary=79568),\n Row(Name='Dejounte Murray', Team='San Antonio Spurs', Position='PG', Birthday='9/19/96', Salary=2321735),\n Row(Name='Jerome Robinson', Team='Los Angeles Clippers', Position='SG', Birthday='2/22/97', Salary=3567720),\n Row(Name='Rudy Gay', Team='San Antonio Spurs', Position='PF', Birthday='8/17/86', Salary=14500000),\n Row(Name='Ryan Broekhoff', Team='Dallas Mavericks', Position='SG', Birthday='8/23/90', Salary=1416852),\n Row(Name='Jake Layman', Team='Minnesota Timberwolves', Position='PF', Birthday='3/7/94', Salary=3581986),\n Row(Name='Cameron Johnson', Team='Phoenix Suns', Position='PF', Birthday='3/3/96', Salary=4033440),\n Row(Name='Allen Crabbe', Team='Atlanta Hawks', Position='SG', Birthday='4/9/92', Salary=18500000),\n Row(Name='Justin James', Team='Sacramento Kings', Position='SG', Birthday='1/24/97', Salary=898310),\n Row(Name='Emmanuel Mudiay', Team='Utah Jazz', Position='PG', Birthday='3/5/96', Salary=1737145),\n Row(Name='Avery Bradley', Team='Los Angeles Lakers', Position='PG', Birthday='11/26/90', Salary=6767000),\n Row(Name='Victor Oladipo', Team='Indiana Pacers', Position='PG', Birthday='5/4/92', Salary=21000000),\n Row(Name='Caleb Martin', Team='Charlotte Hornets', Position='SF', Birthday='9/28/95', Salary=898310),\n Row(Name='Coby White', Team='Chicago Bulls', Position='SG', Birthday='2/16/00', Salary=5307120),\n Row(Name='Isaiah Hartenstein', Team='Houston Rockets', Position='C', Birthday='5/5/98', Salary=1416852),\n Row(Name='Will Barton', Team='Denver Nuggets', Position='SF', Birthday='1/6/91', Salary=12776786),\n Row(Name='Dwayne Bacon', Team='Charlotte Hornets', Position='SG', Birthday='8/30/95', Salary=1618520),\n Row(Name='Harrison Barnes', Team='Sacramento Kings', Position='PF', Birthday='5/30/92', Salary=24147727),\n Row(Name='Tim Frazier', Team='Detroit Pistons', Position='PG', Birthday='11/1/90', Salary=1620564),\n Row(Name='Jimmy Butler', Team='Miami Heat', Position='SF', Birthday='9/14/89', Salary=32742000),\n Row(Name='Gary Harris', Team='Denver Nuggets', Position='SG', Birthday='9/14/94', Salary=17839286),\n Row(Name='Thon Maker', Team='Detroit Pistons', Position='C', Birthday='2/25/97', Salary=3569643),\n Row(Name='Shai Gilgeous-Alexander', Team='Oklahoma City Thunder', Position='PG', Birthday='7/12/98', Salary=3952920),\n Row(Name='Hassan Whiteside', Team='Portland Trail Blazers', Position='C', Birthday='6/13/89', Salary=27093018),\n Row(Name='Karl-Anthony Towns', Team='Minnesota Timberwolves', Position='C', Birthday='11/15/95', Salary=27285000),\n Row(Name='Ky Bowman', Team='Golden State Warriors', Position='PG', Birthday='6/16/97', Salary=79568),\n Row(Name='Ben Simmons', Team='Philadelphia 76ers', Position='PG', Birthday='7/20/96', Salary=8113929),\n Row(Name='Terrence Ross', Team='Orlando Magic', Position='SF', Birthday='2/5/91', Salary=12500000),\n Row(Name='Jordan McLaughlin', Team='Minnesota Timberwolves', Position='PG', Birthday='4/9/96', Salary=79568),\n Row(Name='Daniel Theis', Team='Boston Celtics', Position='C', Birthday='4/4/92', Salary=5000000),\n Row(Name='Jonathan Isaac', Team='Orlando Magic', Position='PF', Birthday='10/3/97', Salary=5806440),\n Row(Name='Cheick Diallo', Team='Phoenix Suns', Position='C', Birthday='9/13/96', Salary=1678854),\n Row(Name='Serge Ibaka', Team='Toronto Raptors', Position='C', Birthday='9/18/89', Salary=23271604),\n Row(Name='Amile Jefferson', Team='Orlando Magic', Position='PF', Birthday='5/7/93', Salary=1339515),\n Row(Name='Cam Reddish', Team='Atlanta Hawks', Position='SF', Birthday='9/1/99', Salary=4245720),\n Row(Name=\"De'Anthony Melton\", Team='Memphis Grizzlies', Position='PG', Birthday='5/28/98', Salary=1416852),\n Row(Name='Udonis Haslem', Team='Miami Heat', Position='C', Birthday='6/9/80', Salary=2564753),\n Row(Name='Charlie Brown', Team='Atlanta Hawks', Position='SG', Birthday='2/2/97', Salary=79568),\n Row(Name='Elie Okobo', Team='Phoenix Suns', Position='PG', Birthday='10/23/97', Salary=1416852),\n Row(Name='Gordon Hayward', Team='Boston Celtics', Position='PF', Birthday='3/23/90', Salary=32700690),\n Row(Name='Marco Belinelli', Team='San Antonio Spurs', Position='SF', Birthday='3/25/86', Salary=5846154),\n Row(Name='Javonte Green', Team='Boston Celtics', Position='SF', Birthday='7/23/93', Salary=898310),\n Row(Name='Rondae Hollis-Jefferson', Team='Toronto Raptors', Position='SF', Birthday='1/3/95', Salary=2500000),\n Row(Name='Carmelo Anthony', Team='Portland Trail Blazers', Position='PF', Birthday='5/29/84', Salary=2159029),\n Row(Name='Danny Green', Team='Los Angeles Lakers', Position='SG', Birthday='6/22/87', Salary=14634147),\n Row(Name='Stephen Curry', Team='Golden State Warriors', Position='PG', Birthday='3/14/88', Salary=40231758),\n Row(Name='Eric Paschall', Team='Golden State Warriors', Position='PF', Birthday='11/4/96', Salary=898310),\n Row(Name='Daniel Gafford', Team='Chicago Bulls', Position='C', Birthday='10/1/98', Salary=898310),\n Row(Name='Anfernee Simons', Team='Portland Trail Blazers', Position='SG', Birthday='6/8/99', Salary=2149560),\n Row(Name='Frank Kaminsky', Team='Phoenix Suns', Position='C', Birthday='4/4/93', Salary=4767000),\n Row(Name='Luke Kennard', Team='Detroit Pistons', Position='SG', Birthday='6/24/96', Salary=3827160),\n Row(Name='Josh Okogie', Team='Minnesota Timberwolves', Position='SG', Birthday='9/1/98', Salary=2530680),\n Row(Name='Rodney Hood', Team='Portland Trail Blazers', Position='SF', Birthday='10/20/92', Salary=5718000),\n Row(Name=\"De'Andre Hunter\", Team='Atlanta Hawks', Position='SF', Birthday='12/2/97', Salary=7068360),\n Row(Name='Klay Thompson', Team='Golden State Warriors', Position='SG', Birthday='2/8/90', Salary=32742000),\n Row(Name='Jrue Holiday', Team='New Orleans Pelicans', Position='PG', Birthday='6/12/90', Salary=26131111),\n Row(Name='PJ Dozier', Team='Denver Nuggets', Position='PG', Birthday='10/25/96', Salary=79568),\n Row(Name='Andre Drummond', Team='Detroit Pistons', Position='C', Birthday='8/10/93', Salary=27093018),\n Row(Name='Jared Harper', Team='Phoenix Suns', Position='PG', Birthday='9/14/97', Salary=79568),\n Row(Name='Russell Westbrook', Team='Houston Rockets', Position='PG', Birthday='11/12/88', Salary=38506482),\n Row(Name='Tony Bradley', Team='Utah Jazz', Position='C', Birthday='1/8/98', Salary=1962360),\n Row(Name='Oshae Brissett', Team='Toronto Raptors', Position='SF', Birthday='6/20/98', Salary=79568),\n Row(Name='Gary Clark', Team='Houston Rockets', Position='PF', Birthday='11/16/94', Salary=1416852),\n Row(Name='Pascal Siakam', Team='Toronto Raptors', Position='PF', Birthday='4/2/94', Salary=2351838),\n Row(Name='Eric Bledsoe', Team='Milwaukee Bucks', Position='PG', Birthday='12/9/89', Salary=15625000),\n Row(Name='Tomas Satoransky', Team='Chicago Bulls', Position='PG', Birthday='10/30/91', Salary=10000000),\n Row(Name='Davis Bertans', Team='Washington Wizards', Position='PF', Birthday='11/12/92', Salary=7000000),\n Row(Name='Amir Coffey', Team='Los Angeles Clippers', Position='G', Birthday='6/17/97', Salary=79568),\n Row(Name='Ignas Brazdeikis', Team='New York Knicks', Position='SF', Birthday='1/8/99', Salary=898310),\n Row(Name='Ivan Rabb', Team='New York Knicks', Position='PF', Birthday='2/4/97', Salary=79568),\n Row(Name='Khris Middleton', Team='Milwaukee Bucks', Position='SF', Birthday='8/12/91', Salary=30603448),\n Row(Name='Kevin Knox', Team='New York Knicks', Position='PF', Birthday='8/11/99', Salary=4380120),\n Row(Name='Jeff Green', Team='Utah Jazz', Position='PF', Birthday='8/28/86', Salary=2564753),\n Row(Name='Ersan Ilyasova', Team='Milwaukee Bucks', Position='PF', Birthday='5/15/87', Salary=7000000),\n Row(Name='Caleb Swanigan', Team='Sacramento Kings', Position='PF', Birthday='4/18/97', Salary=2033160),\n Row(Name='Al Horford', Team='Philadelphia 76ers', Position='C', Birthday='6/3/86', Salary=28000000),\n Row(Name='Clint Capela', Team='Houston Rockets', Position='C', Birthday='5/18/94', Salary=16896552),\n Row(Name='Georges Niang', Team='Utah Jazz', Position='PF', Birthday='6/17/93', Salary=1645357),\n Row(Name='Wesley Matthews', Team='Milwaukee Bucks', Position='SF', Birthday='10/14/86', Salary=2564753),\n Row(Name='Rajon Rondo', Team='Los Angeles Lakers', Position='PG', Birthday='2/22/86', Salary=2564753),\n Row(Name='Delon Wright', Team='Dallas Mavericks', Position='PG', Birthday='4/26/92', Salary=9473684),\n Row(Name='Ja Morant', Team='Memphis Grizzlies', Position='PG', Birthday='8/10/99', Salary=8730240),\n Row(Name='Fred VanVleet', Team='Toronto Raptors', Position='PG', Birthday='2/25/94', Salary=9346153),\n Row(Name='Brandon Clarke', Team='Memphis Grizzlies', Position='PF', Birthday='9/19/96', Salary=2478840),\n Row(Name='Miye Oni', Team='Utah Jazz', Position='SG', Birthday='8/4/97', Salary=898310),\n Row(Name='Julius Randle', Team='New York Knicks', Position='C', Birthday='11/29/94', Salary=18000000),\n Row(Name='Glenn Robinson III', Team='Golden State Warriors', Position='SF', Birthday='1/8/94', Salary=1882867),\n Row(Name='Dillon Brooks', Team='Memphis Grizzlies', Position='SF', Birthday='1/22/96', Salary=1618520),\n Row(Name='Zylan Cheatham', Team='New Orleans Pelicans', Position='SF', Birthday='11/17/95', Salary=79568),\n Row(Name='Markieff Morris', Team='Detroit Pistons', Position='PF', Birthday='9/2/89', Salary=3200000),\n Row(Name='Malik Beasley', Team='Denver Nuggets', Position='SG', Birthday='11/26/96', Salary=2731713),\n Row(Name='John Wall', Team='Washington Wizards', Position='PG', Birthday='9/6/90', Salary=38199000),\n Row(Name='Vlatko Cancar', Team='Denver Nuggets', Position='SF', Birthday='4/10/97', Salary=898310),\n Row(Name='Alize Johnson', Team='Indiana Pacers', Position='PF', Birthday='4/22/96', Salary=1416852),\n Row(Name='Andrew Wiggins', Team='Minnesota Timberwolves', Position='SF', Birthday='2/23/95', Salary=27504630),\n Row(Name='Khyri Thomas', Team='Detroit Pistons', Position='SG', Birthday='5/8/96', Salary=1416852),\n Row(Name='Mitchell Robinson', Team='New York Knicks', Position='C', Birthday='4/1/98', Salary=1559712),\n Row(Name='Damian Lillard', Team='Portland Trail Blazers', Position='PG', Birthday='7/15/90', Salary=29802321),\n Row(Name='Nassir Little', Team='Portland Trail Blazers', Position='PF', Birthday='2/11/00', Salary=2105520),\n Row(Name='Mikal Bridges', Team='Phoenix Suns', Position='SF', Birthday='8/30/96', Salary=4161000),\n Row(Name='Kyle Anderson', Team='Memphis Grizzlies', Position='PF', Birthday='9/20/93', Salary=9073050),\n Row(Name='Garrett Temple', Team='Brooklyn Nets', Position='PG', Birthday='5/8/86', Salary=4767000),\n Row(Name='Kyle Korver', Team='Milwaukee Bucks', Position='PF', Birthday='3/17/81', Salary=6004753),\n Row(Name='Al-Farouq Aminu', Team='Orlando Magic', Position='PF', Birthday='9/21/90', Salary=9258000),\n Row(Name='James Harden', Team='Houston Rockets', Position='PG', Birthday='8/26/89', Salary=38199000),\n Row(Name='Derrick White', Team='San Antonio Spurs', Position='PG', Birthday='7/2/94', Salary=1948080),\n Row(Name='JaKarr Sampson', Team='Indiana Pacers', Position='SF', Birthday='3/20/93', Salary=1737145),\n Row(Name='Dario Saric', Team='Phoenix Suns', Position='PF', Birthday='4/8/94', Salary=3481985),\n Row(Name='Ivica Zubac', Team='Los Angeles Clippers', Position='C', Birthday='3/18/97', Salary=6481482),\n Row(Name='Juan Hernangomez', Team='Denver Nuggets', Position='PF', Birthday='9/28/95', Salary=3321029),\n Row(Name='Jarrell Brantley', Team='Utah Jazz', Position='PF', Birthday='6/7/96', Salary=79568),\n Row(Name='Eric Gordon', Team='Houston Rockets', Position='PG', Birthday='12/25/88', Salary=14057730),\n Row(Name='Naz Reid', Team='Minnesota Timberwolves', Position='F', Birthday='8/26/99', Salary=898310),\n Row(Name='Justin Robinson', Team='Washington Wizards', Position='PG', Birthday='10/12/97', Salary=898310),\n Row(Name='Grayson Allen', Team='Memphis Grizzlies', Position='SG', Birthday='10/8/95', Salary=2429400),\n Row(Name='Trevor Ariza', Team='Sacramento Kings', Position='SF', Birthday='6/30/85', Salary=12200000),\n Row(Name='Brandon Goodwin', Team='Atlanta Hawks', Position='PG', Birthday='10/2/95', Salary=79568),\n Row(Name=\"E'Twaun Moore\", Team='New Orleans Pelicans', Position='PG', Birthday='2/25/89', Salary=8664928),\n Row(Name='Mario Hezonja', Team='Portland Trail Blazers', Position='PF', Birthday='2/25/95', Salary=1737145),\n Row(Name='Henry Ellenson', Team='Brooklyn Nets', Position='PF', Birthday='1/13/97', Salary=79568),\n Row(Name='Johnathan Motley', Team='Los Angeles Clippers', Position='PF', Birthday='5/4/95', Salary=79568),\n Row(Name='James Ennis', Team='Philadelphia 76ers', Position='SF', Birthday='7/1/90', Salary=1882867),\n Row(Name='Andre Roberson', Team='Oklahoma City Thunder', Position='SF', Birthday='12/4/91', Salary=10740740),\n Row(Name='Garrison Mathews', Team='Washington Wizards', Position='SG', Birthday='10/24/96', Salary=79568),\n Row(Name='Jahlil Okafor', Team='New Orleans Pelicans', Position='C', Birthday='12/15/95', Salary=1702486),\n Row(Name='Mfiondu Kabengele', Team='Los Angeles Clippers', Position='C', Birthday='8/14/97', Salary=1977000),\n Row(Name='Treveon Graham', Team='Minnesota Timberwolves', Position='SG', Birthday='10/28/93', Salary=1645357),\n Row(Name='Seth Curry', Team='Dallas Mavericks', Position='PG', Birthday='8/23/90', Salary=7461380),\n Row(Name=\"D'Angelo Russell\", Team='Golden State Warriors', Position='PG', Birthday='2/23/96', Salary=27285000),\n Row(Name='Justin Holiday', Team='Indiana Pacers', Position='SG', Birthday='4/5/89', Salary=4767000),\n Row(Name='Tyrone Wallace', Team='Atlanta Hawks', Position='PG', Birthday='6/10/94', Salary=1620564),\n Row(Name='Miles Bridges', Team='Charlotte Hornets', Position='SF', Birthday='3/21/98', Salary=3755400),\n Row(Name='Bogdan Bogdanovic', Team='Sacramento Kings', Position='SG', Birthday='8/18/92', Salary=8529386),\n Row(Name='Matt Thomas', Team='Toronto Raptors', Position='SG', Birthday='8/4/94', Salary=898310),\n Row(Name='Jordan Bell', Team='Minnesota Timberwolves', Position='C', Birthday='1/7/95', Salary=1620564),\n Row(Name='Wenyen Gabriel', Team='Sacramento Kings', Position='PF', Birthday='3/26/97', Salary=79568),\n Row(Name='Tony Snell', Team='Detroit Pistons', Position='SF', Birthday='11/10/91', Salary=11392857),\n Row(Name='Shaquille Harrison', Team='Chicago Bulls', Position='PG', Birthday='10/6/93', Salary=1620564),\n Row(Name='Yogi Ferrell', Team='Sacramento Kings', Position='PG', Birthday='5/9/93', Salary=3150000),\n Row(Name='Mike Scott', Team='Philadelphia 76ers', Position='PF', Birthday='7/16/88', Salary=4767000),\n Row(Name='Jarred Vanderbilt', Team='Denver Nuggets', Position='PF', Birthday='4/3/99', Salary=1416852),\n Row(Name='Jeff Teague', Team='Minnesota Timberwolves', Position='PG', Birthday='6/10/88', Salary=19000000),\n Row(Name='Zach Norvell', Team='Los Angeles Lakers', Position='SG', Birthday='12/9/97', Salary=79568),\n Row(Name='Maxi Kleber', Team='Dallas Mavericks', Position='C', Birthday='1/29/92', Salary=8000000),\n Row(Name='Matisse Thybulle', Team='Philadelphia 76ers', Position='SG', Birthday='3/4/97', Salary=2582160),\n Row(Name='Ryan Arcidiacono', Team='Chicago Bulls', Position='PG', Birthday='3/26/94', Salary=3000000),\n Row(Name='Wayne Ellington', Team='New York Knicks', Position='SG', Birthday='11/29/87', Salary=8000000),\n Row(Name='Kawhi Leonard', Team='Los Angeles Clippers', Position='SF', Birthday='6/29/91', Salary=32742000),\n Row(Name='Montrezl Harrell', Team='Los Angeles Clippers', Position='C', Birthday='1/26/94', Salary=6000000),\n Row(Name='Jusuf Nurkic', Team='Portland Trail Blazers', Position='C', Birthday='8/23/94', Salary=12000000),\n Row(Name='Matthew Dellavedova', Team='Cleveland Cavaliers', Position='PG', Birthday='9/8/90', Salary=9607500),\n Row(Name='Cody Martin', Team='Charlotte Hornets', Position='SF', Birthday='9/28/95', Salary=1173310),\n Row(Name='Zhaire Smith', Team='Philadelphia 76ers', Position='SG', Birthday='6/4/99', Salary=3058800),\n Row(Name='RJ Barrett', Team='New York Knicks', Position='SG', Birthday='6/14/00', Salary=7839960),\n Row(Name='Lonnie Walker', Team='San Antonio Spurs', Position='SG', Birthday='12/14/98', Salary=2764200),\n Row(Name='Taurean Prince', Team='Brooklyn Nets', Position='SF', Birthday='3/22/94', Salary=3481985),\n Row(Name='Elfrid Payton', Team='New York Knicks', Position='PG', Birthday='2/22/94', Salary=8000000),\n Row(Name='Blake Griffin', Team='Detroit Pistons', Position='PF', Birthday='3/16/89', Salary=34449964),\n Row(Name='Marko Guduric', Team='Memphis Grizzlies', Position='SG', Birthday='3/8/95', Salary=2625000),\n Row(Name='Zach Collins', Team='Portland Trail Blazers', Position='C', Birthday='11/19/97', Salary=4240200),\n Row(Name='Stanley Johnson', Team='Toronto Raptors', Position='PF', Birthday='5/29/96', Salary=3623000),\n Row(Name='Boban Marjanovic', Team='Dallas Mavericks', Position='C', Birthday='8/15/88', Salary=3500000),\n Row(Name='Josh Magette', Team='Orlando Magic', Position='PG', Birthday='11/28/89', Salary=79568),\n Row(Name='Kyle Lowry', Team='Toronto Raptors', Position='PG', Birthday='3/25/86', Salary=33296296),\n Row(Name='Darius Garland', Team='Cleveland Cavaliers', Position='PG', Birthday='1/26/00', Salary=6400920),\n Row(Name='Frank Jackson', Team='New Orleans Pelicans', Position='PG', Birthday='5/4/98', Salary=1618520),\n Row(Name='Dragan Bender', Team='Milwaukee Bucks', Position='PF', Birthday='11/17/97', Salary=1678854),\n Row(Name='Kenrich Williams', Team='New Orleans Pelicans', Position='PF', Birthday='12/2/94', Salary=1416852),\n Row(Name='Jerami Grant', Team='Denver Nuggets', Position='PF', Birthday='3/12/94', Salary=9346153),\n Row(Name='Allonzo Trier', Team='New York Knicks', Position='PG', Birthday='1/17/96', Salary=3551100),\n Row(Name='Pat Connaughton', Team='Milwaukee Bucks', Position='SG', Birthday='1/6/93', Salary=1723050),\n Row(Name='Domantas Sabonis', Team='Indiana Pacers', Position='C', Birthday='5/3/96', Salary=3529554),\n Row(Name='Dylan Windler', Team='Cleveland Cavaliers', Position='GF', Birthday='9/22/96', Salary=2035800),\n Row(Name='Antonius Cleveland', Team='Dallas Mavericks', Position='SG', Birthday='2/2/94', Salary=79568),\n Row(Name='Damion Lee', Team='Golden State Warriors', Position='SG', Birthday='10/21/92', Salary=79568),\n Row(Name='Khem Birch', Team='Orlando Magic', Position='C', Birthday='9/28/92', Salary=3000000),\n Row(Name='Aron Baynes', Team='Phoenix Suns', Position='C', Birthday='12/9/86', Salary=5453280),\n Row(Name='Kemba Walker', Team='Boston Celtics', Position='PG', Birthday='5/8/90', Salary=32742000),\n Row(Name='Nerlens Noel', Team='Oklahoma City Thunder', Position='C', Birthday='4/10/94', Salary=1882867),\n Row(Name='Jabari Parker', Team='Atlanta Hawks', Position='PF', Birthday='3/15/95', Salary=6500000),\n Row(Name='Carsen Edwards', Team='Boston Celtics', Position='SG', Birthday='3/12/98', Salary=1228026),\n Row(Name='Anthony Tolliver', Team='Portland Trail Blazers', Position='PF', Birthday='6/1/85', Salary=2564753),\n Row(Name='Lauri Markkanen', Team='Chicago Bulls', Position='PF', Birthday='5/22/97', Salary=5300400),\n Row(Name='Kris Dunn', Team='Chicago Bulls', Position='PG', Birthday='3/18/94', Salary=5348007),\n Row(Name='Reggie Bullock', Team='New York Knicks', Position='SF', Birthday='3/16/91', Salary=4000000),\n Row(Name='Mike Conley', Team='Utah Jazz', Position='PG', Birthday='10/11/87', Salary=32511623),\n Row(Name='Jaylen Nowell', Team='Minnesota Timberwolves', Position='SG', Birthday='7/9/99', Salary=1400000),\n Row(Name='Gorgui Dieng', Team='Minnesota Timberwolves', Position='C', Birthday='1/18/90', Salary=16229213),\n Row(Name='Patrick Patterson', Team='Los Angeles Clippers', Position='PF', Birthday='3/14/89', Salary=3068660),\n Row(Name='Jarrett Allen', Team='Brooklyn Nets', Position='C', Birthday='4/21/98', Salary=2376840),\n Row(Name='Bobby Portis', Team='New York Knicks', Position='C', Birthday='2/10/95', Salary=15000000),\n Row(Name='Joel Embiid', Team='Philadelphia 76ers', Position='C', Birthday='3/16/94', Salary=27504630),\n Row(Name='Jonas Valanciunas', Team='Memphis Grizzlies', Position='C', Birthday='5/6/92', Salary=16000000),\n Row(Name='Chris Chiozza', Team='Washington Wizards', Position='PG', Birthday='11/21/95', Salary=79568),\n Row(Name='Kent Bazemore', Team='Portland Trail Blazers', Position='SF', Birthday='7/1/89', Salary=19269663),\n Row(Name='Tristan Thompson', Team='Cleveland Cavaliers', Position='C', Birthday='3/13/91', Salary=18539130),\n Row(Name='Mason Plumlee', Team='Denver Nuggets', Position='C', Birthday='3/5/90', Salary=14041096),\n Row(Name='Shabazz Napier', Team='Minnesota Timberwolves', Position='PG', Birthday='7/14/91', Salary=1845301),\n Row(Name='Edmond Sumner', Team='Indiana Pacers', Position='PG', Birthday='12/31/95', Salary=2000000),\n Row(Name='Alex Len', Team='Atlanta Hawks', Position='C', Birthday='6/16/93', Salary=4160000),\n Row(Name='Josh Richardson', Team='Philadelphia 76ers', Position='SF', Birthday='9/15/93', Salary=10116576),\n Row(Name='Bojan Bogdanovic', Team='Utah Jazz', Position='SF', Birthday='4/18/89', Salary=17000000),\n Row(Name='Iman Shumpert', Team='Brooklyn Nets', Position='PG', Birthday='6/26/90', Salary=2031676),\n Row(Name='Daryl Macon', Team='Miami Heat', Position='SG', Birthday='11/29/95', Salary=79568),\n Row(Name='Rodney McGruder', Team='Los Angeles Clippers', Position='SG', Birthday='7/29/91', Salary=4807693),\n Row(Name='Bam Adebayo', Team='Miami Heat', Position='C', Birthday='7/18/97', Salary=3454080),\n Row(Name='Jacob Evans', Team='Golden State Warriors', Position='SG', Birthday='6/18/97', Salary=1928280),\n Row(Name='Nigel Williams-Goss', Team='Utah Jazz', Position='PG', Birthday='9/16/94', Salary=1500000),\n Row(Name='Terrance Ferguson', Team='Oklahoma City Thunder', Position='SF', Birthday='5/17/98', Salary=2475840),\n Row(Name='Michael Carter-Williams', Team='Orlando Magic', Position='PG', Birthday='10/10/91', Salary=2028594),\n Row(Name='Bol Bol', Team='Denver Nuggets', Position='C', Birthday='11/16/99', Salary=79568),\n Row(Name='Willie Cauley-Stein', Team='Golden State Warriors', Position='C', Birthday='8/18/93', Salary=2177483),\n Row(Name='Nikola Vucevic', Team='Orlando Magic', Position='C', Birthday='10/24/90', Salary=28000000),\n Row(Name='Nicolas Batum', Team='Charlotte Hornets', Position='SF', Birthday='12/14/88', Salary=25565217),\n Row(Name='Kyrie Irving', Team='Brooklyn Nets', Position='PG', Birthday='3/23/92', Salary=31742000),\n Row(Name='Jeremy Lamb', Team='Indiana Pacers', Position='SF', Birthday='5/30/92', Salary=10500000),\n Row(Name='Donovan Mitchell', Team='Utah Jazz', Position='SG', Birthday='9/7/96', Salary=3635760),\n Row(Name='Thanasis Antetokounmpo', Team='Milwaukee Bucks', Position='SF', Birthday='7/18/92', Salary=1445697),\n Row(Name='James Johnson', Team='Miami Heat', Position='PF', Birthday='2/20/87', Salary=15349400),\n Row(Name='Monte Morris', Team='Denver Nuggets', Position='PG', Birthday='6/27/95', Salary=1588231),\n Row(Name='Terry Rozier', Team='Charlotte Hornets', Position='PG', Birthday='3/17/94', Salary=19894737),\n Row(Name='DeAndre Jordan', Team='Brooklyn Nets', Position='C', Birthday='7/21/88', Salary=9881598),\n Row(Name='Jae Crowder', Team='Memphis Grizzlies', Position='SF', Birthday='7/6/90', Salary=7815533),\n Row(Name='Josh Gray', Team='New Orleans Pelicans', Position='PG', Birthday='9/9/93', Salary=79568),\n Row(Name='Goga Bitadze', Team='Indiana Pacers', Position='C', Birthday='7/20/99', Salary=2816760),\n Row(Name='Kobi Simmons', Team='Charlotte Hornets', Position='PG', Birthday='7/4/97', Salary=79568),\n Row(Name='Derrick Favors', Team='New Orleans Pelicans', Position='C', Birthday='7/15/91', Salary=17650000),\n Row(Name='Landry Shamet', Team='Los Angeles Clippers', Position='SG', Birthday='3/13/97', Salary=1995120),\n Row(Name='Jalen McDaniels', Team='Charlotte Hornets', Position='PF', Birthday='1/31/98', Salary=898310),\n Row(Name='Bruno Caboclo', Team='Memphis Grizzlies', Position='SF', Birthday='9/21/95', Salary=1845301),\n Row(Name='Drew Eubanks', Team='San Antonio Spurs', Position='PF', Birthday='2/1/97', Salary=79568),\n Row(Name='Raul Neto', Team='Philadelphia 76ers', Position='PG', Birthday='5/19/92', Salary=1737145),\n Row(Name='Jalen Lecque', Team='Phoenix Suns', Position='G', Birthday='6/13/00', Salary=898310),\n Row(Name='Giannis Antetokounmpo', Team='Milwaukee Bucks', Position='PF', Birthday='12/6/94', Salary=25842697),\n Row(Name='Malik Monk', Team='Charlotte Hornets', Position='SG', Birthday='2/4/98', Salary=4028400),\n Row(Name='Tacko Fall', Team='Boston Celtics', Position='C', Birthday='12/10/95', Salary=79568),\n Row(Name='Justin Jackson', Team='Dallas Mavericks', Position='PF', Birthday='3/28/95', Salary=3280920),\n Row(Name='Paul George', Team='Los Angeles Clippers', Position='SF', Birthday='5/2/90', Salary=33005556),\n Row(Name='Jayson Tatum', Team='Boston Celtics', Position='PF', Birthday='3/3/98', Salary=7830000),\n Row(Name='Admiral Schofield', Team='Washington Wizards', Position='SF', Birthday='3/30/97', Salary=1000000),\n Row(Name='Louis King', Team='Detroit Pistons', Position='F', Birthday='4/6/99', Salary=79568),\n Row(Name='Kostas Antetokounmpo', Team='Los Angeles Lakers', Position='PF', Birthday='11/20/97', Salary=79568),\n Row(Name='Rodions Kurucs', Team='Brooklyn Nets', Position='PF', Birthday='2/5/98', Salary=1699236),\n Row(Name='Spencer Dinwiddie', Team='Brooklyn Nets', Position='PG', Birthday='4/6/93', Salary=10605600),\n Row(Name='Doug McDermott', Team='Indiana Pacers', Position='PF', Birthday='1/3/92', Salary=7333333),\n Row(Name='Romeo Langford', Team='Boston Celtics', Position='SG', Birthday='10/25/99', Salary=3458400),\n Row(Name='Caris LeVert', Team='Brooklyn Nets', Position='SF', Birthday='8/25/94', Salary=2625717),\n Row(Name='Michael Kidd-Gilchrist', Team='Charlotte Hornets', Position='PF', Birthday='9/26/93', Salary=13000000),\n Row(Name='LeBron James', Team='Los Angeles Lakers', Position='PF', Birthday='12/30/84', Salary=37436858),\n Row(Name='Taj Gibson', Team='New York Knicks', Position='C', Birthday='6/24/85', Salary=9000000),\n Row(Name='Ty Jerome', Team='Phoenix Suns', Position='G', Birthday='7/8/97', Salary=2193480),\n Row(Name='Chris Clemons', Team='Houston Rockets', Position='SG', Birthday='7/23/97', Salary=79568),\n Row(Name='Luke Kornet', Team='Chicago Bulls', Position='C', Birthday='7/15/95', Salary=2250000),\n Row(Name='Trey Lyles', Team='San Antonio Spurs', Position='PF', Birthday='11/5/95', Salary=5500000),\n Row(Name='Sterling Brown', Team='Milwaukee Bucks', Position='SF', Birthday='2/10/95', Salary=1618520),\n Row(Name='Andre Iguodala', Team='Memphis Grizzlies', Position='SF', Birthday='1/28/84', Salary=17185185),\n Row(Name='Vincent Poirier', Team='Boston Celtics', Position='C', Birthday='10/17/93', Salary=2505793),\n Row(Name='Frank Ntilikina', Team='New York Knicks', Position='PG', Birthday='7/28/98', Salary=4855800),\n Row(Name='Jordan McRae', Team='Washington Wizards', Position='PG', Birthday='3/28/91', Salary=1645357),\n Row(Name='Enes Kanter', Team='Boston Celtics', Position='C', Birthday='5/20/92', Salary=4767000),\n Row(Name='John Henson', Team='Cleveland Cavaliers', Position='C', Birthday='12/28/90', Salary=9732396),\n Row(Name='Jaylen Brown', Team='Boston Celtics', Position='SF', Birthday='10/24/96', Salary=6534829),\n Row(Name='Jonah Bolden', Team='Philadelphia 76ers', Position='PF', Birthday='1/2/96', Salary=1698450),\n Row(Name='Chimezie Metu', Team='San Antonio Spurs', Position='PF', Birthday='3/22/97', Salary=1416852),\n Row(Name='Tobias Harris', Team='Philadelphia 76ers', Position='PF', Birthday='7/15/92', Salary=32742000),\n Row(Name='Semi Ojeleye', Team='Boston Celtics', Position='PF', Birthday='12/5/94', Salary=1618520),\n Row(Name='Jevon Carter', Team='Phoenix Suns', Position='PG', Birthday='9/14/95', Salary=1416852),\n Row(Name='Brandon Ingram', Team='New Orleans Pelicans', Position='PF', Birthday='9/2/97', Salary=7265485),\n Row(Name='Moritz Wagner', Team='Washington Wizards', Position='C', Birthday='4/26/97', Salary=2063520),\n Row(Name='Dorian Finney-Smith', Team='Dallas Mavericks', Position='PF', Birthday='5/4/93', Salary=4000000),\n Row(Name='Danuel House', Team='Houston Rockets', Position='SF', Birthday='6/7/93', Salary=3540000),\n Row(Name='Nicolo Melli', Team='New Orleans Pelicans', Position='C', Birthday='1/26/91', Salary=4102564),\n Row(Name='Talen Horton-Tucker', Team='Los Angeles Lakers', Position='GF', Birthday='11/25/00', Salary=898310),\n Row(Name='Ed Davis', Team='Utah Jazz', Position='C', Birthday='6/5/89', Salary=4767000),\n Row(Name='Kyle Guy', Team='Sacramento Kings', Position='G', Birthday='8/11/97', Salary=79568),\n Row(Name='Kadeem Allen', Team='New York Knicks', Position='PG', Birthday='1/15/93', Salary=79568),\n Row(Name='Dante Exum', Team='Utah Jazz', Position='PG', Birthday='7/13/95', Salary=9600000),\n Row(Name='Abdel Nader', Team='Oklahoma City Thunder', Position='SF', Birthday='9/25/93', Salary=1618520),\n Row(Name='Bruno Fernando', Team='Atlanta Hawks', Position='C', Birthday='8/15/98', Salary=1400000),\n Row(Name='Dion Waiters', Team='Miami Heat', Position='SG', Birthday='12/10/91', Salary=12100000),\n Row(Name='Jared Dudley', Team='Los Angeles Lakers', Position='PF', Birthday='7/10/85', Salary=2564753),\n Row(Name='Max Strus', Team='Chicago Bulls', Position='SG', Birthday='3/28/96', Salary=79568),\n Row(Name='Kevon Looney', Team='Golden State Warriors', Position='C', Birthday='2/6/96', Salary=4464286),\n Row(Name='Willy Hernangomez', Team='Charlotte Hornets', Position='C', Birthday='5/27/94', Salary=1557250),\n Row(Name='Melvin Frazier', Team='Orlando Magic', Position='SG', Birthday='8/30/96', Salary=1416852),\n Row(Name='Austin Rivers', Team='Houston Rockets', Position='PG', Birthday='8/1/92', Salary=2174310),\n Row(Name='Harry Giles', Team='Sacramento Kings', Position='PF', Birthday='4/22/98', Salary=2578800),\n Row(Name='Robin Lopez', Team='Milwaukee Bucks', Position='C', Birthday='4/1/88', Salary=4767000),\n Row(Name='Collin Sexton', Team='Cleveland Cavaliers', Position='PG', Birthday='1/4/99', Salary=4764960),\n Row(Name='Ricky Rubio', Team='Phoenix Suns', Position='PG', Birthday='10/21/90', Salary=16200000)]\n\n\n\n\nChanging Variables \n\nAdding Columns  df.withColumn() takes the new name, along with how you’d like to create the new column. When using an already existing column, you must specify that it is a column by using col('ColumnName'). \n\n\nNote: you need to import col() in order for it to be recognized. \n\nExample: Dividing the NBA salaries by 1000\n\nfrom pyspark.sql.functions import col\ndf = df.withColumn(\"SalaryK\", col(\"Salary\")/1000)\n\n+--------------+------------------+--------+--------+-------+--------+\n|          Name|              Team|Position|Birthday| Salary| SalaryK|\n+--------------+------------------+--------+--------+-------+--------+\n|  Shake Milton|Philadelphia 76ers|      SG| 9/26/96|1445697|1445.697|\n|Christian Wood|   Detroit Pistons|      PF| 9/27/95|1645357|1645.357|\n| PJ Washington| Charlotte Hornets|      PF| 8/23/98|3831840| 3831.84|\n|  Derrick Rose|   Detroit Pistons|      PG| 10/4/88|7317074|7317.074|\n| Marial Shayok|Philadelphia 76ers|       G| 7/26/95|  79568|  79.568|\n+--------------+------------------+--------+--------+-------+--------+\nonly showing top 5 rows\n\n\n\n\nRemoving Columns  df.drop() takes one or multiple column names.  Example: Removing ‘SalaryK’\n\n\ndf = df.drop(\"SalaryK\").show(5)\n\n+--------------+------------------+--------+--------+-------+\n|          Name|              Team|Position|Birthday| Salary|\n+--------------+------------------+--------+--------+-------+\n|  Shake Milton|Philadelphia 76ers|      SG| 9/26/96|1445697|\n|Christian Wood|   Detroit Pistons|      PF| 9/27/95|1645357|\n| PJ Washington| Charlotte Hornets|      PF| 8/23/98|3831840|\n|  Derrick Rose|   Detroit Pistons|      PG| 10/4/88|7317074|\n| Marial Shayok|Philadelphia 76ers|       G| 7/26/95|  79568|\n+--------------+------------------+--------+--------+-------+\nonly showing top 5 rows\n\n\n\n\nRenaming Columns  df.withColumnRenamed() takes the current column name, followed by the new name Example: Changing ‘Birthday’ to ‘DateOfBirth’\n\n\ndf = df.withColumnRenamed(\"Birthday\", \"DateOfBirth\").show(5)\n\n+--------------+------------------+--------+-----------+-------+\n|          Name|              Team|Position|DateOfBirth| Salary|\n+--------------+------------------+--------+-----------+-------+\n|  Shake Milton|Philadelphia 76ers|      SG|    9/26/96|1445697|\n|Christian Wood|   Detroit Pistons|      PF|    9/27/95|1645357|\n| PJ Washington| Charlotte Hornets|      PF|    8/23/98|3831840|\n|  Derrick Rose|   Detroit Pistons|      PG|    10/4/88|7317074|\n| Marial Shayok|Philadelphia 76ers|       G|    7/26/95|  79568|\n+--------------+------------------+--------+-----------+-------+\nonly showing top 5 rows\n\n\n\n\nRearranging Columns Use select() to order the columns in the way that you would like.  Example:\n\n\ndf = df.select(\"Name\", \"Team\", \"Position\", \"Salary\").show(5)\n\n+--------------+------------------+--------+-------+\n|          Name|              Team|Position| Salary|\n+--------------+------------------+--------+-------+\n|  Shake Milton|Philadelphia 76ers|      SG|1445697|\n|Christian Wood|   Detroit Pistons|      PF|1645357|\n| PJ Washington| Charlotte Hornets|      PF|3831840|\n|  Derrick Rose|   Detroit Pistons|      PG|7317074|\n| Marial Shayok|Philadelphia 76ers|       G|  79568|\n+--------------+------------------+--------+-------+\nonly showing top 5 rows\n\n\n\n\n\nMathematical & Vectorized Operations \n\nAggregate Functions: \n\n\nmean() \nmin() \nmax() \nstdev_pop() \nmedian()  These functions are used within selectExpr(). They take the name of the variable you’d like to aggregate, and then add as “new_variable_name” after.  Here are the aggregation functions in action:\n\n\ndf.selectExpr(\n    \"mean(Salary) as mean_salary\",\n    \"min(Salary) as min_salary\",\n    \"max(Salary) as max_salary\",\n    \"stddev_pop(Salary) as std_salary\"\n).show()\n\n+-----------------+----------+----------+-----------------+\n|      mean_salary|min_salary|max_salary|       std_salary|\n+-----------------+----------+----------+-----------------+\n|7653583.764444444|     79568|  40231758|9278483.657952718|\n+-----------------+----------+----------+-----------------+\n\n\n\n\nUsing the functions package\n\n\nfrom pyspark.sql import functions as F\n\nThis package will allow you to create new columns or transform current ones.  Examples:  - F.avg()  - F.concat()  - F.lit()  - F.col() \nHere are these fucntions in action:\n\nsalary_mean = df.select(F.avg(\"Salary\").alias(\"mean_salary\")).collect()[0][\"mean_salary\"]\n\ndf2 = (\n    df\n    .withColumn(\"Salary_2x\", F.col(\"Salary\") * 2)    # Add Salary_2x\n    .withColumn(\n        \"Name_w_Position\",           # Concatenate Name and Position\n        F.concat(F.col(\"Name\"), F.lit(\" (\"), F.col(\"Position\"), F.lit(\")\")))\n    .withColumn(\n        \"Salary_minus_Mean\",        # Subtract mean salary\n        F.col(\"Salary\") - F.lit(salary_mean))\n).show(5)\n\n+--------------+------------------+--------+--------+-------+---------+-------------------+-------------------+\n|          Name|              Team|Position|Birthday| Salary|Salary_2x|    Name_w_Position|  Salary_minus_Mean|\n+--------------+------------------+--------+--------+-------+---------+-------------------+-------------------+\n|  Shake Milton|Philadelphia 76ers|      SG| 9/26/96|1445697|  2891394|  Shake Milton (SG)| -6207886.764444444|\n|Christian Wood|   Detroit Pistons|      PF| 9/27/95|1645357|  3290714|Christian Wood (PF)| -6008226.764444444|\n| PJ Washington| Charlotte Hornets|      PF| 8/23/98|3831840|  7663680| PJ Washington (PF)|-3821743.7644444443|\n|  Derrick Rose|   Detroit Pistons|      PG| 10/4/88|7317074| 14634148|  Derrick Rose (PG)| -336509.7644444443|\n| Marial Shayok|Philadelphia 76ers|       G| 7/26/95|  79568|   159136|  Marial Shayok (G)| -7574015.764444444|\n+--------------+------------------+--------+--------+-------+---------+-------------------+-------------------+\nonly showing top 5 rows\n\n\n\n\n\nConverting Data Types \n\n.cast() is used after a variable is specified, and takes different data types as a string. \nto_date() converts data to a specified date format. It takes the variable to be changed, and the specific date format you wish to chose.\n\n\nfrom pyspark.sql.functions import to_date\n\ndf = df.withColumn('DateOfBirth_ts', to_date('Birthday','M/d/yy')).show(5)\n\n+--------------+------------------+--------+--------+-------+--------------+\n|          Name|              Team|Position|Birthday| Salary|DateOfBirth_ts|\n+--------------+------------------+--------+--------+-------+--------------+\n|  Shake Milton|Philadelphia 76ers|      SG| 9/26/96|1445697|    2096-09-26|\n|Christian Wood|   Detroit Pistons|      PF| 9/27/95|1645357|    2095-09-27|\n| PJ Washington| Charlotte Hornets|      PF| 8/23/98|3831840|    2098-08-23|\n|  Derrick Rose|   Detroit Pistons|      PG| 10/4/88|7317074|    2088-10-04|\n| Marial Shayok|Philadelphia 76ers|       G| 7/26/95|  79568|    2095-07-26|\n+--------------+------------------+--------+--------+-------+--------------+\nonly showing top 5 rows\n\n\n\nMain Data Types:  - int  - float  - string  - boolean  - date  - timestamp \n\n\nFiltering by a Condition \ndf.filter() takes one or multiple conditions to be met and displayed. Separate conditions by putting each one in parentheses and with the & or | sign.  Here are some examples with a new DataFrame:\n\nimport pandas as pd\nfrom pyspark.sql import SparkSession\nspark = SparkSession.builder.master(\"local[*]\").getOrCreate()\ndf_pd = pd.read_csv(\"https://bcdanl.github.io/data/employment.csv\")\ndf_pd = df_pd.where(pd.notnull(df_pd), None)  # Convert NaN to None\ndf = spark.createDataFrame(df_pd)\n\n\ndf.filter(col(\"Salary\") &gt; 100000).show(5)\n\n+----------+------+----------+--------+-----+---------+\n|First Name|Gender|Start Date|  Salary| Mgmt|     Team|\n+----------+------+----------+--------+-----+---------+\n|   Douglas|  Male|    8/6/93|     NaN| true|Marketing|\n|     Maria|Female|      NULL|130590.0|false|  Finance|\n|     Jerry|  NULL|    3/4/05|138705.0| true|  Finance|\n|     Larry|  Male|   1/24/98|101004.0| true|       IT|\n|    Dennis|  Male|   4/18/87|115163.0|false|    Legal|\n+----------+------+----------+--------+-----+---------+\nonly showing top 5 rows\n\n\n\n\n#or\n\ndf.filter(\n    ( col(\"Team\") == \"Finance\" ) &\n    ( col(\"Salary\") &gt;= 100000 )\n).show(5)\n\n+----------+------+----------+--------+-----+-------+\n|First Name|Gender|Start Date|  Salary| Mgmt|   Team|\n+----------+------+----------+--------+-----+-------+\n|     Maria|Female|      NULL|130590.0|false|Finance|\n|     Jerry|  NULL|    3/4/05|138705.0| true|Finance|\n|     Bruce|  Male|  11/28/09|114796.0|false|Finance|\n|      Carl|  Male|    5/3/06|130276.0| true|Finance|\n|     Irene|  NULL|   7/14/15|100863.0| true|Finance|\n+----------+------+----------+--------+-----+-------+\nonly showing top 5 rows\n\n\n\n\n#or\n\ndf.filter(\n    (col(\"Team\") == \"Finance\") |\n    (col(\"Team\") == \"Legal\")   |\n    (col(\"Team\") == \"Sales\")\n).show(5)\n\n+----------+------+----------+--------+-----+-------+\n|First Name|Gender|Start Date|  Salary| Mgmt|   Team|\n+----------+------+----------+--------+-----+-------+\n|     Maria|Female|      NULL|130590.0|false|Finance|\n|     Jerry|  NULL|    3/4/05|138705.0| true|Finance|\n|    Dennis|  Male|   4/18/87|115163.0|false|  Legal|\n|      NULL|Female|   7/20/15| 45906.0| NULL|Finance|\n|     Julie|Female|  10/26/97|102508.0| true|  Legal|\n+----------+------+----------+--------+-----+-------+\nonly showing top 5 rows\n\n\n\nisin() used within filter(), takes a list of values within a variable and filters only those values.\n\ndf.filter(col('Team').isin('Finance','Legal','Sales')).show(5)\n\n+----------+------+----------+--------+-----+-------+\n|First Name|Gender|Start Date|  Salary| Mgmt|   Team|\n+----------+------+----------+--------+-----+-------+\n|     Maria|Female|      NULL|130590.0|false|Finance|\n|     Jerry|  NULL|    3/4/05|138705.0| true|Finance|\n|    Dennis|  Male|   4/18/87|115163.0|false|  Legal|\n|      NULL|Female|   7/20/15| 45906.0| NULL|Finance|\n|     Julie|Female|  10/26/97|102508.0| true|  Legal|\n+----------+------+----------+--------+-----+-------+\nonly showing top 5 rows\n\n\n\nbetween() is also used within filter(). It takes a range of values and returns True if a value falls wihin the range.\n\ndf_between = df.filter(col('Salary').between(90000,100000))\ndf_between.show(5)\n\n+----------+------+----------+-------+-----+-----------+\n|First Name|Gender|Start Date| Salary| Mgmt|       Team|\n+----------+------+----------+-------+-----+-----------+\n|    Angela|Female|  11/22/05|95570.0| true|Engineering|\n|    Jeremy|  Male|   9/21/10|90370.0|false|         HR|\n|    Joshua|  NULL|    3/8/12|90816.0| true|         IT|\n|      John|  Male|    7/1/92|97950.0|false|         IT|\n|     Jerry|  Male|   1/10/04|95734.0|false|         IT|\n+----------+------+----------+-------+-----+-----------+\nonly showing top 5 rows\n\n\n\n\n\nMissing Values\nFind how many missing values are in a column with isNull():\n\ndf.filter(col('Team').isNull()).count()\n\n44\n\n\nYou can find how many non-null values by using the same code and replacing isNull() with isNotNull(). \nDrop rows with missing values with na.drop():\n\ndf_drop = df.na.drop().show(10)\n\n+----------+------+----------+--------+-----+------------+\n|First Name|Gender|Start Date|  Salary| Mgmt|        Team|\n+----------+------+----------+--------+-----+------------+\n|     Larry|  Male|   1/24/98|101004.0| true|          IT|\n|    Dennis|  Male|   4/18/87|115163.0|false|       Legal|\n|      Ruby|Female|   8/17/87| 65476.0| true|     Product|\n|    Angela|Female|  11/22/05| 95570.0| true| Engineering|\n|   Frances|Female|    8/8/02|139852.0| true|Business Dev|\n|     Julie|Female|  10/26/97|102508.0| true|       Legal|\n|   Brandon|  Male|   12/1/80|112807.0| true|          HR|\n|      Gary|  Male|   1/27/08|109831.0|false|       Sales|\n|  Kimberly|Female|   1/14/99| 41426.0| true|     Finance|\n|   Lillian|Female|    6/5/16| 59414.0|false|     Product|\n+----------+------+----------+--------+-----+------------+\nonly showing top 10 rows\n\n\n\n\ntakes the argument how = 'all', which removes observations that all values are missing \nuse the argument subset = to target rows with missing values in a given variable \n\n\ndf_drop_subset = df.na.drop(subset=[\"Gender\", \"Team\"]).show(10)\n\n+----------+------+----------+--------+-----+------------+\n|First Name|Gender|Start Date|  Salary| Mgmt|        Team|\n+----------+------+----------+--------+-----+------------+\n|   Douglas|  Male|    8/6/93|     NaN| true|   Marketing|\n|     Maria|Female|      NULL|130590.0|false|     Finance|\n|     Larry|  Male|   1/24/98|101004.0| true|          IT|\n|    Dennis|  Male|   4/18/87|115163.0|false|       Legal|\n|      Ruby|Female|   8/17/87| 65476.0| true|     Product|\n|      NULL|Female|   7/20/15| 45906.0| NULL|     Finance|\n|    Angela|Female|  11/22/05| 95570.0| true| Engineering|\n|   Frances|Female|    8/8/02|139852.0| true|Business Dev|\n|     Julie|Female|  10/26/97|102508.0| true|       Legal|\n|   Brandon|  Male|   12/1/80|112807.0| true|          HR|\n+----------+------+----------+--------+-----+------------+\nonly showing top 10 rows\n\n\n\nna.fill() fills in null values with a specified value.\n\ndf_fill = df.na.fill(value = 0, subset = [\"Salary\"]).show(10)\n\n+----------+------+----------+--------+-----+------------+\n|First Name|Gender|Start Date|  Salary| Mgmt|        Team|\n+----------+------+----------+--------+-----+------------+\n|   Douglas|  Male|    8/6/93|     0.0| true|   Marketing|\n|    Thomas|  Male|   3/31/96| 61933.0| true|        NULL|\n|     Maria|Female|      NULL|130590.0|false|     Finance|\n|     Jerry|  NULL|    3/4/05|138705.0| true|     Finance|\n|     Larry|  Male|   1/24/98|101004.0| true|          IT|\n|    Dennis|  Male|   4/18/87|115163.0|false|       Legal|\n|      Ruby|Female|   8/17/87| 65476.0| true|     Product|\n|      NULL|Female|   7/20/15| 45906.0| NULL|     Finance|\n|    Angela|Female|  11/22/05| 95570.0| true| Engineering|\n|   Frances|Female|    8/8/02|139852.0| true|Business Dev|\n+----------+------+----------+--------+-----+------------+\nonly showing top 10 rows\n\n\n\n\nyou can do multiple variables at a time by usingn a dictionary instead of value = , subset =\n\n\n\nDealing with Duplicates\ndropDuplicates() drops all rows that are exact duplicates\n\ndf_no_dups = df.dropDuplicates()\n\n\nadd ['Variable_Name'] in the function to specify how to drop duplicates\n\n\ndf_no_dups_subset = df.dropDuplicates([\"Team\"])\n\nNow you’re all caught up on the PySpark basics!"
  },
  {
    "objectID": "posts/ggplot-review/ggplot-basics.html",
    "href": "posts/ggplot-review/ggplot-basics.html",
    "title": "GGPlot Basics",
    "section": "",
    "text": "Let’s go over some essentials to create amazing visualizations in GGPlot. We will use the gapminder dataframe. First, we’ll load tidyverse, which is where ggplot2 is stored, and the gapminder dataframe.\n\nlibrary(tidyverse)\nlibrary(gapminder)\ngapminder &lt;- gapminder::gapminder\nview(gapminder)\n\n\nDifferent Types of GGPlots\n\nScatter Plot\n\n\nggplot(data = gapminder,\n       mapping = aes(x = gdpPercap, \n                     y = lifeExp))+\n  geom_point()\n\n\n\n\n\n\n\n\n1a. Scatter Plot with curve of best fit\n\nggplot(data = gapminder,\n       mapping = aes(x = gdpPercap, \n                     y = lifeExp))+\n  geom_point()+\n  geom_smooth()\n\n\n\n\n\n\n\n\n\nyou can get rid of the shaded part by inserting the argument se = FALSE in geom_smooth\n\n\nLine Chart\n\n\nA time series of GPD in the United States from 1952 until 2007.\n\n\ng &lt;- gapminder |&gt;\n  filter(country %in% 'United States')\n\n\nggplot(data = g,\n       mapping = aes(x = year,\n                     y = gdpPercap))+\n  geom_line()\n\n\n\n\n\n\n\n\n\nBar Chart\n\n\nThis gives a count of each continent recorded.\n\n\nggplot(data = gapminder,\n       mapping = aes(x = continent))+\n  geom_bar()\n\n\n\n\n\n\n\n\n\nBox Plot\n\n\nRange of GDP across the world in 2007\n\n\ngdp &lt;- gapminder |&gt;\n  filter(year %in% 2007)\n\n\nggplot(data = gdp,\n       mapping = aes(x = gdpPercap))+\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\nAesthetic Mapping\nIn most cases, we will want to go beyond the basic ggPlots. We can do this in a few different ways: - add color - reduce overplotting - facets - add labels\n\nColor Color can be used to showcase different variables and/or make a graph more aesthically pleasing. Let’s add some color to our bar chart.\n\n\nggplot(data = gapminder,\n       mapping = aes(x = continent))+\n  geom_bar(aes(fill = continent))\n\n\n\n\n\n\n\n\n\nAlthough our graph is still the same, it looks much nicer and less boring than the first graph.\n\nNow, lets showcase how each continent varies in our scatter plot.\n\nggplot(data = gapminder,\n       mapping = aes(x = gdpPercap, \n                     y = lifeExp))+\n  geom_point(aes(color = continent))\n\n\n\n\n\n\n\n\n\nThis gives us insight into how different continents compare to each other’s relationship between GDP Per Capita and Life Expectancy\n\nYou might notice that a lot of points towards the left of the graph look very crowded. This is called overplotting, and there is a way to reduce this.\n\nReduce Overplotting\n\n\nWe can use alpha to add transparency to the graph\nalpha is set to a value between 0 and 1\n\nThe closer to 0, the more transparent the points become\n\n\n\nggplot(data = gapminder,\n       mapping = aes(x = gdpPercap, \n                     y = lifeExp))+\n  geom_point(aes(color = continent,\n                 alpha = .04))\n\n\n\n\n\n\n\n\n\nThe points are still jumbled together, but it is easier to see through the overlapping.\n\nWith a large quantity of data, sometimes it’s easier to interpret a graph if it is partitioned into smaller graphs by a variable in the dataset. This is where facets come into play.\n\nFacets Continuing with our scatter plot, separating the points into facets by continent (just like we did with color), will paint a more clear picture about the relationships between GDP and Life Expectancy for each continent.\n\n\nggplot(data = gapminder,\n       mapping = aes(x = gdpPercap, \n                     y = lifeExp))+\n  geom_point()+\n  facet_wrap(~continent)+\n  geom_smooth()\n\n\n\n\n\n\n\n\n\nLabels\n\n\nLabels add clarity to a graph. They tell the audience exactly what they are looking at, leaving little room for misinterpretation.\n\n\nggplot(data = gapminder,\n       mapping = aes(x = gdpPercap, \n                     y = lifeExp))+\n  geom_point()+\n  facet_wrap(~continent)+\n  geom_smooth()+\nlabs(x = \"GDP Per Capita\", \n         y = \"Life Expectancy in Years\",\n         title = \"GDP and Life Expectancy Throughout the World\",\n         subtitle = \"Years 1952 Through 2007\",\n         caption = \"Source: Gapminder.\")\n\n\n\n\n\n\n\n\n-This is very useful if the variable names in a dataset are not very clear, and because you can add some background information about the data."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Emily Peters",
    "section": "",
    "text": "Emily Peters majors in Data Analytics and minors in Mathematics at SUNY Geneseo. Outside of school, Emily enjoys spending time outside with her dog and doing puzzles."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Emily Peters",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo | Geneseo, NY  B.S. in Data Analytics | Jan 2023 - May 2025  Minor in Business Mathematics \nGenesee Community College | Batavia, NY  Major in Economic Crime Investigation | Aug 2021 - Dec 2022"
  },
  {
    "objectID": "320_files/seaborn_basics.html",
    "href": "320_files/seaborn_basics.html",
    "title": "Seaborn Example",
    "section": "",
    "text": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Sample data\ndata = {\n    'Category': ['A', 'B', 'C', 'D'],\n    'Values': [23, 45, 56, 78]\n}\ndf = pd.DataFrame(data)\n\n# Create a barplot\nsns.set(style=\"whitegrid\")  # Optional: Set a clean grid style\nplt.figure(figsize=(8, 6))  # Set the figure size\nsns.barplot(data=df, x='Category', y='Values', palette='viridis')\n\n# Customize the plot\nplt.title(\"Bar Plot Example\", fontsize=16)\nplt.xlabel(\"Category\", fontsize=12)\nplt.ylabel(\"Values\", fontsize=12)\n\n# Show the plot\nplt.show()\n\nFutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(data=df, x='Category', y='Values', palette='viridis')"
  },
  {
    "objectID": "320_files/danl_proj_nba.html#salary-distribution-among-teams",
    "href": "320_files/danl_proj_nba.html#salary-distribution-among-teams",
    "title": "Data Analysis Project",
    "section": "Salary Distribution Among Teams",
    "text": "Salary Distribution Among Teams\nLet’s start with the salary distribution among teams using seaborn for visualization. ​​\n\n\n# Handle missing values in 'Salary' by replacing them with the median salary\nmedian_salary = nba['Salary'].median()\nnba['Salary'].fillna(median_salary, inplace=True)\n\n/var/folders/_m/d6jf0jhd2zzdfd5kzdhl_24w0000gn/T/ipykernel_79892/1671011424.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  nba['Salary'].fillna(median_salary, inplace=True)\n\n\n\n# Set the aesthetic style of the plots\nsns.set_style(\"whitegrid\")\n\n# Calculate total salary by team\nteam_salary = (\n    nba\n    .groupby('Team')['Salary']\n    .sum()\n    .reset_index()\n    .sort_values(by='Salary', ascending=False)\n)\n\n# Plot total salary by team\nplt.figure(figsize=(10, 16))\nsns.barplot(data = team_salary,\n            x = 'Salary', y = 'Team',\n            palette = 'coolwarm')\nplt.title('Total Salary Distribution Among NBA Teams')\nplt.xlabel('Total Salary')\nplt.ylabel('Team')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\nThe visualization above displays the total salary distribution among NBA teams, with teams sorted by their total salary expenditure. This bar plot reveals which teams are the biggest spenders on player salaries and which are more conservative. The color gradient provides a visual cue to easily distinguish between the higher and lower spending teams.\nNotice that Portland Trail Blazers has the highest total salary followed by Golden State Warriors and Philadelphia 76ers, and Memphis Grizzlies has the lowest total salary."
  },
  {
    "objectID": "320_files/danl_proj_nba.html#player-age-distribution",
    "href": "320_files/danl_proj_nba.html#player-age-distribution",
    "title": "Data Analysis Project",
    "section": "Player Age Distribution",
    "text": "Player Age Distribution\nNext, let’s explore the Player Age Distribution across the NBA. We’ll create a histogram to visualize how player ages are distributed, which will help us understand if the league trends younger, older, or has a balanced age mix. ​​\n\n# Convert 'Birthday' column to datetime format\nfrom dateutil import parser\n# nba['Birthday'] = nba['Birthday'].apply(lambda x: parser.parse(x))\n\n# Now, let's calculate the age of each player\n# nba['Age'] = (datetime.now() - nba['Birthday']).dt.days // 365\n\n# Plot the age distribution of NBA players\nplt.figure(figsize=(10, 6))\nsns.histplot(nba['Age'],\n             bins = 15,\n             kde = True,\n             color = 'skyblue')\nplt.title('Age Distribution of NBA Players')\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.show()\n\n\n/Users/bchoe/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\nThe histogram above shows the age distribution of NBA players, with a kernel density estimate (KDE) overlay to indicate the distribution shape. The plot helps identify the common ages for NBA players and whether there are significant numbers of very young or older players.\nNotice that the majority of players fall within an age range from 24 to 34. There are few players whose age is above 40."
  },
  {
    "objectID": "320_files/danl_proj_nba.html#position-wise-salary-insights",
    "href": "320_files/danl_proj_nba.html#position-wise-salary-insights",
    "title": "Data Analysis Project",
    "section": "Position-wise Salary Insights",
    "text": "Position-wise Salary Insights\nMoving on to Position-wise Salary Insights, we’ll examine how average salaries differ across player positions. This analysis could reveal which positions are typically higher-paid, potentially reflecting their value on the basketball court. Let’s create a box plot to visualize the salary distribution for each position. ​​\n\n# Plot salary distribution by player position\nplt.figure(figsize=(10, 6))\nsns.boxplot(data = nba,\n            x = 'Position', y = 'Salary',\n            palette = 'Set2')\nplt.title('Salary Distribution by Position')\nplt.xlabel('Position')\nplt.ylabel('Salary')\nplt.show()\n\n\n\n\n\n\n\n\nThe box plot above illustrates the salary distribution by player position, showcasing the variation in salaries among different positions within the NBA. PG-SG has the highest median salary."
  },
  {
    "objectID": "320_files/danl_proj_nba.html#top-10-highest-paid-players",
    "href": "320_files/danl_proj_nba.html#top-10-highest-paid-players",
    "title": "Data Analysis Project",
    "section": "Top 10 Highest Paid Players",
    "text": "Top 10 Highest Paid Players\nLastly, we’ll identify the Top 10 Highest Paid Players in the NBA. Let’s visualize this information.\n\n# Identify the top 10 highest paid players\ntop_10_salaries = nba.sort_values(by='Salary', ascending=False).head(10)\n\n# Plot the top 10 highest paid players\nplt.figure(figsize=(12, 8))\nsns.barplot(data = top_10_salaries,\n            x = 'Salary', y = 'PlayerName',\n            palette = 'viridis')\nplt.title('Top 10 Highest Paid NBA Players')\nplt.xlabel('Salary')\nplt.ylabel('Player')\nplt.show()\n\n\n\n\n\n\n\n\nThe bar plot above reveals the top 10 highest-paid NBA players, showcasing those who stand at the pinnacle of the league in terms of salary. This visualization not only highlights the star players who command the highest salaries but also may reflect their marketability, performance, and contribution to their respective teams."
  },
  {
    "objectID": "310_files/danl-310-quarto-r.html",
    "href": "310_files/danl-310-quarto-r.html",
    "title": "Quarto with R",
    "section": "",
    "text": "“Tidy datasets are all alike, but every messy dataset is messy in its own way.” — Hadley Wickham\n\nR is a powerful language and environment for statistical computing and graphics. It is widely used among statisticians and data analysts for data analysis and developing statistical software. Here are some basic concepts and elements of R to help you get started:\n\n\n\nVariables in R are used to store data. You can create a variable using the assignment operator &lt;- (option/Alt + -). For example:\n\n\nCode\nmy_variable &lt;- 10\n\n\nThis will store the value 10 in my_variable.\n\n\n\n\n\nR has several basic data types:\n\nNumeric: For decimal values like 2.5.\nInteger: For whole numbers like 2L (the L tells R it is an integer).\nCharacter: For text or string values, e.g., \"Hello\".\nLogical: For boolean values (TRUE or FALSE).\n\n\n\n\n\n\nVectors are a basic data structure in R. They contain elements of the same type. You can create a vector using the c() function:\n\n\nCode\nmy_vector &lt;- c(1, 2, 3, 4, 5)\n\n\n\n\n\n\nData frames are used for storing data tables in R. It is a list of vectors of equal length. For example, to create a simple data frame:\n\n\nCode\ndf &lt;- data.frame(\n  Name = c(\"Alice\", \"Bob\"), \n  Age = c(25, 30)\n  )\n\n\n\n\n\n\nFunctions are used to carry out specific tasks in R. For example, sum() is a function that adds numbers together:\n\n\nCode\nsum(1, 2, 3) # Returns 6\n\n\n[1] 6\n\n\n\n\n\n\nR has a vast collection of packages for various statistical tasks. You can install a package using install.packages(\"packageName\") and load it using library(packageName).\n\n\nCode\n# install.packages(\"tidyverse\")\nlibrary(tidyverse)\n\n\n\n\n\n\nTo get help on a specific function or topic, use the help() function or the shorthand ?, like ?sum on R Console."
  },
  {
    "objectID": "310_files/danl-310-quarto-r.html#variables",
    "href": "310_files/danl-310-quarto-r.html#variables",
    "title": "Quarto with R",
    "section": "",
    "text": "Variables in R are used to store data. You can create a variable using the assignment operator &lt;- (option/Alt + -). For example:\n\n\nCode\nmy_variable &lt;- 10\n\n\nThis will store the value 10 in my_variable."
  },
  {
    "objectID": "310_files/danl-310-quarto-r.html#data-types",
    "href": "310_files/danl-310-quarto-r.html#data-types",
    "title": "Quarto with R",
    "section": "",
    "text": "R has several basic data types:\n\nNumeric: For decimal values like 2.5.\nInteger: For whole numbers like 2L (the L tells R it is an integer).\nCharacter: For text or string values, e.g., \"Hello\".\nLogical: For boolean values (TRUE or FALSE)."
  },
  {
    "objectID": "310_files/danl-310-quarto-r.html#vectors",
    "href": "310_files/danl-310-quarto-r.html#vectors",
    "title": "Quarto with R",
    "section": "",
    "text": "Vectors are a basic data structure in R. They contain elements of the same type. You can create a vector using the c() function:\n\n\nCode\nmy_vector &lt;- c(1, 2, 3, 4, 5)"
  },
  {
    "objectID": "310_files/danl-310-quarto-r.html#data-frames",
    "href": "310_files/danl-310-quarto-r.html#data-frames",
    "title": "Quarto with R",
    "section": "",
    "text": "Data frames are used for storing data tables in R. It is a list of vectors of equal length. For example, to create a simple data frame:\n\n\nCode\ndf &lt;- data.frame(\n  Name = c(\"Alice\", \"Bob\"), \n  Age = c(25, 30)\n  )"
  },
  {
    "objectID": "310_files/danl-310-quarto-r.html#functions",
    "href": "310_files/danl-310-quarto-r.html#functions",
    "title": "Quarto with R",
    "section": "",
    "text": "Functions are used to carry out specific tasks in R. For example, sum() is a function that adds numbers together:\n\n\nCode\nsum(1, 2, 3) # Returns 6\n\n\n[1] 6"
  },
  {
    "objectID": "310_files/danl-310-quarto-r.html#packages",
    "href": "310_files/danl-310-quarto-r.html#packages",
    "title": "Quarto with R",
    "section": "",
    "text": "R has a vast collection of packages for various statistical tasks. You can install a package using install.packages(\"packageName\") and load it using library(packageName).\n\n\nCode\n# install.packages(\"tidyverse\")\nlibrary(tidyverse)"
  },
  {
    "objectID": "310_files/danl-310-quarto-r.html#help-system",
    "href": "310_files/danl-310-quarto-r.html#help-system",
    "title": "Quarto with R",
    "section": "",
    "text": "To get help on a specific function or topic, use the help() function or the shorthand ?, like ?sum on R Console."
  },
  {
    "objectID": "310_files/danl-310-quarto-r.html#key-concepts",
    "href": "310_files/danl-310-quarto-r.html#key-concepts",
    "title": "Quarto with R",
    "section": "2.1 Key Concepts",
    "text": "2.1 Key Concepts\n\nData: The raw data that you want to plot.\naes() (Aesthetic Mappings): Defines how data are mapped to color, size, shape, and other visual properties.\nGeoms (Geometric Objects): The type of objects that represent data points, like points, lines, bars, etc.\nFacets: For creating small multiples, splitting data into subsets and displaying the same plot for each subset.\nScales: Control how data values are translated to visual properties.\nCoordinate Systems: The plane in which data is plotted, e.g., Cartesian, polar.\nThemes: Control the overall appearance of the plot, like background color, grid lines, and font sizes."
  },
  {
    "objectID": "310_files/danl-310-quarto-r.html#examples",
    "href": "310_files/danl-310-quarto-r.html#examples",
    "title": "Quarto with R",
    "section": "2.2 Examples",
    "text": "2.2 Examples\nLet’s go through some examples to illustrate how ggplot can be used to create different types of visualizations.\n\n2.2.1 Scatter Plot\nCreating a scatter plot to explore the relationship between two variables, say mpg (miles per gallon) and wt (weight of the car) from the mtcars dataset.\n\n\nCode\nggplot(mtcars, aes(x = wt, y = mpg)) + \n  geom_point() +\n  labs(x = \"Weight of Car\", y = \"Miles Per Gallon\",\n       title = \"Scatter plot of MPG vs Car Weight\")\n\n\n\n\n\n\n\n\n\nThis code block creates a scatter plot where car weight is on the x-axis and miles per gallon on the y-axis. Each point represents a car.\n\n\n2.2.2 Bar Chart\nCreating a bar chart to show the count of cars by the number of cylinders.\n\n\nCode\nggplot(mtcars, aes(x = factor(cyl))) + \n  geom_bar() + \n  labs(x = \"Number of Cylinders\", y = \"Count\",\n       title = \"Count of Cars by Cylinders\")\n\n\n\n\n\n\n\n\n\nThis plots a bar chart where each bar represents the count of cars with a certain number of cylinders.\n\n\n2.2.3 Line Graph\nPlotting a line graph, assuming we have a time series data.frame economics that is part of ggplot2 package.\n\n\nCode\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_line() +\n  labs(x = \"Year\", y = \"Number of Unemployed Persons\",\n       title = \"Unemployment over Time\") \n\n\n\n\n\n\n\n\n\nThis code plots the unemployment numbers over time, with time on the x-axis and the number of unemployed persons on the y-axis.\n\n\n2.2.4 Faceted Plot\nCreating a faceted plot to compare scatter plots of mpg vs wt across different numbers of cylinders.\n\n\nCode\nggplot(mtcars, aes(x = wt, y = mpg)) + \n  geom_point() +\n  facet_wrap(~cyl) +\n  labs(title = \"MPG vs Weight by Number of Cylinders\")\n\n\n\n\n\n\n\n\n\nThis splits the data into subsets based on the number of cylinders and creates a scatter plot for each subset."
  },
  {
    "objectID": "310_files/danl-310-quarto-r.html#conclusion",
    "href": "310_files/danl-310-quarto-r.html#conclusion",
    "title": "Quarto with R",
    "section": "2.3 Conclusion",
    "text": "2.3 Conclusion\nggplot2 provides a powerful and flexible system for making a wide variety of plots. By understanding the grammar of graphics upon which it is based, you can build up complex visualizations from simple components, allowing for a deep and intuitive exploration of data."
  },
  {
    "objectID": "320_files/danl-320-python-basic.html",
    "href": "320_files/danl-320-python-basic.html",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')\n\n\n\n\nIn Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5\n\n\n\n\n\nPython supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')\n\n\n\n\nA function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()\n\n\n\n\nA list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "320_files/danl-320-python-basic.html#what-is-python",
    "href": "320_files/danl-320-python-basic.html#what-is-python",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')"
  },
  {
    "objectID": "320_files/danl-320-python-basic.html#variables-and-data-types",
    "href": "320_files/danl-320-python-basic.html#variables-and-data-types",
    "title": "Python Basics",
    "section": "",
    "text": "In Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5"
  },
  {
    "objectID": "320_files/danl-320-python-basic.html#control-structures",
    "href": "320_files/danl-320-python-basic.html#control-structures",
    "title": "Python Basics",
    "section": "",
    "text": "Python supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')"
  },
  {
    "objectID": "320_files/danl-320-python-basic.html#functions",
    "href": "320_files/danl-320-python-basic.html#functions",
    "title": "Python Basics",
    "section": "",
    "text": "A function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()"
  },
  {
    "objectID": "320_files/danl-320-python-basic.html#lists-and-dictionaries",
    "href": "320_files/danl-320-python-basic.html#lists-and-dictionaries",
    "title": "Python Basics",
    "section": "",
    "text": "A list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "320_files/pandas_basics.html#creating-a-series",
    "href": "320_files/pandas_basics.html#creating-a-series",
    "title": "Pandas Basics",
    "section": "Creating a Series",
    "text": "Creating a Series\n\n\n# Creating a Series from a list\ndata = [10, 20, 30, 40, 50]\nseries = pd.Series(data)\nseries\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\n10\n\n\n1\n20\n\n\n2\n30\n\n\n3\n40\n\n\n4\n50\n\n\n\n\ndtype: int64"
  },
  {
    "objectID": "320_files/pandas_basics.html#creating-a-dataframe",
    "href": "320_files/pandas_basics.html#creating-a-dataframe",
    "title": "Pandas Basics",
    "section": "Creating a DataFrame",
    "text": "Creating a DataFrame\n\n\n# Creating a DataFrame from a dictionary\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [25, 30, 35],\n    \"City\": [\"New York\", \"Los Angeles\", \"Chicago\"]\n}\ndf = pd.DataFrame(data)\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n0\nAlice\n25\nNew York\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "320_files/pandas_basics.html#exploring-data",
    "href": "320_files/pandas_basics.html#exploring-data",
    "title": "Pandas Basics",
    "section": "Exploring Data",
    "text": "Exploring Data\n\n\n# Display the first few rows\ndf.head()\n\n# Display the shape of the DataFrame\nprint(\"Shape:\", df.shape)\n\n# Display summary statistics\ndf.describe()\n\nShape: (3, 3)\n\n\n\n  \n    \n\n\n\n\n\n\nAge\n\n\n\n\ncount\n3.0\n\n\nmean\n30.0\n\n\nstd\n5.0\n\n\nmin\n25.0\n\n\n25%\n27.5\n\n\n50%\n30.0\n\n\n75%\n32.5\n\n\nmax\n35.0"
  },
  {
    "objectID": "320_files/pandas_basics.html#selecting-data",
    "href": "320_files/pandas_basics.html#selecting-data",
    "title": "Pandas Basics",
    "section": "Selecting Data",
    "text": "Selecting Data\n\n# Selecting a single column\ndf[\"Name\"]\n\n\n\n\n\n\n\n\nName\n\n\n\n\n0\nAlice\n\n\n1\nBob\n\n\n2\nCharlie\n\n\n\n\ndtype: object\n\n\n\n# Selecting multiple columns\ndf[[\"Name\", \"City\"]]\n\n\n  \n    \n\n\n\n\n\n\nName\nCity\n\n\n\n\n0\nAlice\nNew York\n\n\n1\nBob\nLos Angeles\n\n\n2\nCharlie\nChicago\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n# Selecting rows by index\ndf.iloc[0]\n\n\n\n\n\n\n\n\n0\n\n\n\n\nName\nAlice\n\n\nAge\n25\n\n\nCity\nNew York\n\n\n\n\ndtype: object"
  },
  {
    "objectID": "320_files/pandas_basics.html#filtering-data",
    "href": "320_files/pandas_basics.html#filtering-data",
    "title": "Pandas Basics",
    "section": "Filtering Data",
    "text": "Filtering Data\n\n# Filtering rows where Age is greater than 25\nfiltered_df = df[df[\"Age\"] &gt; 25]\nfiltered_df\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "320_files/pandas_basics.html#adding-a-new-column",
    "href": "320_files/pandas_basics.html#adding-a-new-column",
    "title": "Pandas Basics",
    "section": "Adding a New Column",
    "text": "Adding a New Column\n\n\n# Adding a new column\ndf[\"Salary\"] = [50000, 60000, 70000]\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\nSalary\n\n\n\n\n0\nAlice\n25\nNew York\n50000\n\n\n1\nBob\n30\nLos Angeles\n60000\n\n\n2\nCharlie\n35\nChicago\n70000\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n    ## Conclusion\n\n    This notebook covers the basic operations of pandas. You can explore more advanced features like merging,\n    joining, and working with time series data in pandas documentation: https://pandas.pydata.org/docs/"
  },
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "Insightful Analytics",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nBen & Jerry’s Analysis\n\n\n\n\n\n\n\n\nMar 24, 2025\n\n\nEmily Peters\n\n\n6 min\n\n\n\n\n\n\n\n\n\n\n\n\nPySpark Basics\n\n\n\n\n\n\n\n\nFeb 17, 2025\n\n\nEmily Peters\n\n\n6 min\n\n\n\n\n\n\n\n\n\n\n\n\nGGPlot Basics\n\n\n\n\n\n\n\n\nFeb 17, 2025\n\n\nEmily Peters\n\n\n5 min\n\n\n\n\n\n\n\n\n\n\n\n\nStarwars\n\n\n\n\n\n\n\n\nOct 30, 2023\n\n\nYour Name\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\n\n\nOct 30, 2023\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\nOct 27, 2023\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/ben-and-jerrys-310/b-j-blog.html",
    "href": "posts/ben-and-jerrys-310/b-j-blog.html",
    "title": "Ben & Jerry’s Analysis",
    "section": "",
    "text": "library(tidyverse)\nlibrary(skimr)\nlibrary(ggrepel)\n\n\nice_cream &lt;- read_csv('https://bcdanl.github.io/data/ben-and-jerry-cleaned.csv')\nDT::datatable(ice_cream |&gt; head(100))\n\n\n\n\n\n\nDT::datatable(skim(ice_cream))\n\n\n\n\n\n\n\n\nprice_house &lt;- ice_cream |&gt; \n  group_by(household_size) |&gt; \n  summarize(tot_spent = sum(priceper1)) |&gt; \n  arrange(desc(tot_spent)) |&gt; \n  mutate(tot_spent = round(tot_spent, 2))\n\n\nggplot(data = price_house,\n       mapping = aes(x = household_size,\n                     y = tot_spent)) +\n  geom_line(color = \"deepskyblue\", size = 1.5) +\n  geom_point() +\n  theme_minimal() +\n  scale_y_continuous(breaks = c(5000,10000,15000,20000,25000,30000), labels = scales :: dollar) +\n  scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,9)) +\n  labs(x = \"People per Household\",\n       y = \"Total Money Spent\",\n       title = \"Total Money Spent on Ben and Jerry's \\n Ice Cream by Household Size\") +\n  annotate(\"rect\",\n           xmin = .75, xmax = 2.25,\n           ymin = 17000, ymax = 28500,\n           fill = \"green3\", alpha = .3) +\n  annotate(\"text\",\n           x = 2.5, y = 25000,\n           label = \"Households with a small number of \\n kids or no kids at all buy much more \\n ice cream.\",\n           hjust = 0, size = 3)\n\n\n\n\n\n\n\n\nThis may be suprising results at first look. One might think that larger households would buy more ice cream since there are most likely more children in the household, and ice cream is notably a favorite treat among children. However, for Ben & Jerry’s that is not the case. Here are a couple reasons why:  1. Smaller portions  Ben and Jerry’s is purchased in either 16 ounce or 32 ounce containers (1 or 2 pints). Purchasing enough Ben & Jerry’s ice cream for a larger household will get very expensive. For large families, it would make more financial sense to get a larger container of ice cream of a different brand for the whole family. On the other hand, a smaller container of ice cream would suit households with 1 to 2, or sometimes 3 people. Buying for a smaller amount of people makes Ben and Jerry’s more convenient, which might lead to a smaller household consistantly buying it.  2. Income  Households with 0 children or 1 child will most likely have different budgetary restrictions that than households with multiple children. Obviously, it is much less expensive to support fewer children. Households with multiple children will have to allocate their money differently, which might deter them from buying multiple containers of Ben and Jerry’s consistantly.\n\n\n\n\ntot_spent_flavor &lt;- ice_cream |&gt; \n  group_by(flavor_descr, region) |&gt; \n  summarize(flav_spent = sum(priceper1))\n\n\nggplot(data = tot_spent_flavor,\n       mapping = aes(x = fct_reorder(flavor_descr,\n                                     flav_spent,\n                                     na.rm = T), \n                     y = flav_spent,\n                     fill = flavor_descr))+\n  geom_col(data = tot_spent_flavor |&gt; \n             filter(region == \"Central\") |&gt; \n             arrange(desc(flav_spent)) |&gt; \n             head(5)) +\n    geom_col(data = tot_spent_flavor |&gt; \n             filter(region == \"East\") |&gt; \n             arrange(desc(flav_spent)) |&gt; \n             head(5)) +\n    geom_col(data = tot_spent_flavor |&gt; \n             filter(region == \"South\") |&gt; \n             arrange(desc(flav_spent)) |&gt; \n             head(5)) +\n    geom_col(data = tot_spent_flavor |&gt; \n             filter(region == \"West\") |&gt;\n             arrange(desc(flav_spent)) |&gt; \n             head(5)) +\n  facet_wrap(~ region, \n             scales = \"free_x\",\n             nrow = 1) +\n  theme_bw()+\n  theme(legend.position = \"bottom\",\n        legend.key.size = unit(8, \"pt\"),\n        axis.text.x = element_text(angle = 45,\n                                   size = 4))+\n  scale_fill_viridis_d()+\n  scale_y_continuous(labels = scales :: dollar) +\n  labs(x = \"\",\n       y = \"Total Money Spent\",\n       title = \"Top 5 Flavors Sold by Region\",\n       fill = \"Flavor\")"
  },
  {
    "objectID": "posts/ben-and-jerrys-310/b-j-blog.html#money-spent-on-ben-jerrys-per-flavor",
    "href": "posts/ben-and-jerrys-310/b-j-blog.html#money-spent-on-ben-jerrys-per-flavor",
    "title": "Ben & Jerry’s Analysis",
    "section": "",
    "text": "price_house &lt;- ice_cream |&gt; \n  group_by(household_size) |&gt; \n  summarize(tot_spent = sum(priceper1)) |&gt; \n  arrange(desc(tot_spent)) |&gt; \n  mutate(tot_spent = round(tot_spent, 2))\n\n\nggplot(data = price_house,\n       mapping = aes(x = household_size,\n                     y = tot_spent)) +\n  geom_line(color = \"deepskyblue\", size = 1.5) +\n  geom_point() +\n  theme_minimal() +\n  scale_y_continuous(breaks = c(5000,10000,15000,20000,25000,30000), labels = scales :: dollar) +\n  scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,9)) +\n  labs(x = \"People per Household\",\n       y = \"Total Money Spent\",\n       title = \"Total Money Spent on Ben and Jerry's \\n Ice Cream by Household Size\") +\n  annotate(\"rect\",\n           xmin = .75, xmax = 2.25,\n           ymin = 17000, ymax = 28500,\n           fill = \"green3\", alpha = .3) +\n  annotate(\"text\",\n           x = 2.5, y = 25000,\n           label = \"Households with a small number of \\n kids or no kids at all buy much more \\n ice cream.\",\n           hjust = 0, size = 3)\n\n\n\n\n\n\n\n\nThis may be suprising results at first look. One might think that larger households would buy more ice cream since there are most likely more children in the household, and ice cream is notably a favorite treat among children. However, for Ben & Jerry’s that is not the case. Here are a couple reasons why:  1. Smaller portions  Ben and Jerry’s is purchased in either 16 ounce or 32 ounce containers (1 or 2 pints). Purchasing enough Ben & Jerry’s ice cream for a larger household will get very expensive. For large families, it would make more financial sense to get a larger container of ice cream of a different brand for the whole family. On the other hand, a smaller container of ice cream would suit households with 1 to 2, or sometimes 3 people. Buying for a smaller amount of people makes Ben and Jerry’s more convenient, which might lead to a smaller household consistantly buying it.  2. Income  Households with 0 children or 1 child will most likely have different budgetary restrictions that than households with multiple children. Obviously, it is much less expensive to support fewer children. Households with multiple children will have to allocate their money differently, which might deter them from buying multiple containers of Ben and Jerry’s consistantly."
  },
  {
    "objectID": "posts/ben-and-jerrys-310/b-j-blog.html#top-10-flavors-sold-by-region",
    "href": "posts/ben-and-jerrys-310/b-j-blog.html#top-10-flavors-sold-by-region",
    "title": "Ben & Jerry’s Analysis",
    "section": "",
    "text": "tot_spent_flavor &lt;- ice_cream |&gt; \n  group_by(flavor_descr, region) |&gt; \n  summarize(flav_spent = sum(priceper1))\n\n\nggplot(data = tot_spent_flavor,\n       mapping = aes(x = fct_reorder(flavor_descr,\n                                     flav_spent,\n                                     na.rm = T), \n                     y = flav_spent,\n                     fill = flavor_descr))+\n  geom_col(data = tot_spent_flavor |&gt; \n             filter(region == \"Central\") |&gt; \n             arrange(desc(flav_spent)) |&gt; \n             head(5)) +\n    geom_col(data = tot_spent_flavor |&gt; \n             filter(region == \"East\") |&gt; \n             arrange(desc(flav_spent)) |&gt; \n             head(5)) +\n    geom_col(data = tot_spent_flavor |&gt; \n             filter(region == \"South\") |&gt; \n             arrange(desc(flav_spent)) |&gt; \n             head(5)) +\n    geom_col(data = tot_spent_flavor |&gt; \n             filter(region == \"West\") |&gt;\n             arrange(desc(flav_spent)) |&gt; \n             head(5)) +\n  facet_wrap(~ region, \n             scales = \"free_x\",\n             nrow = 1) +\n  theme_bw()+\n  theme(legend.position = \"bottom\",\n        legend.key.size = unit(8, \"pt\"),\n        axis.text.x = element_text(angle = 45,\n                                   size = 4))+\n  scale_fill_viridis_d()+\n  scale_y_continuous(labels = scales :: dollar) +\n  labs(x = \"\",\n       y = \"Total Money Spent\",\n       title = \"Top 5 Flavors Sold by Region\",\n       fill = \"Flavor\")"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code with no space in the folder name.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/starwars/starwars_df.html",
    "href": "posts/starwars/starwars_df.html",
    "title": "Starwars",
    "section": "",
    "text": "Let’s analyze the starwars data:\nstarwars &lt;- read_csv(\"https://bcdanl.github.io/data/starwars.csv\")"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "href": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "title": "Starwars",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#human-vs.-droid",
    "href": "posts/starwars/starwars_df.html#human-vs.-droid",
    "title": "Starwars",
    "section": "Human vs. Droid",
    "text": "Human vs. Droid\n\nggplot(data = \n         starwars %&gt;% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  }
]