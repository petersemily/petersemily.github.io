mode = "driving",
structure = "route"
)
route2 <- route(
from = "Empire State Building, NYC",
to   = "Times Square, NYC",
mode = "driving",
structure = "route"
)
route3 <- route(
from = "Times Square, NYC",
to   = "Central Park, NYC",
mode = "driving",
structure = "route"
)
install.packages("ggimage")
library(ggimage)
nyc_taxi <- read_csv("https://bcdanl.github.io/data/yellow_tripdata_2016-03-sample.csv")
View(nyc_taxi)
range_lat_MET <- c(40.7785, 40.780)
range_lon_MET <- c(-73.963, -73.9615)
range_lat_MET <- c(40.7785, 40.780)
install.packages("plotly")
library(plotly)
dat <- data.frame(cond = rep(c("A", "B"), each = 10),
xvar = 1:20 + rnorm(20, sd=3),
yvar = 1:20 + rnorm(20, sd=3))
p <- ggplot(dat, aes(x = xvar, y = yvar)) +
geom_point(shape=1)      # Use hollow circles
fig <- ggplotly(p)
fig
cces <- read_csv(url("https://bcdanl.github.io/data/cces.csv"))
cces <- cces |>
mutate(party = recode(dem, `1` = "Democrat", `0` = "Republican"))
p <- ggplot(cces, aes(x = seniority, y = les,
color = party))+
geom_point()+
scale_color_manual(values=c("blue","red")) +
labs(x = "Seniority", y = "Leg. Effectiveness")
p1 <- ggplotly(p)
p1
install.packages('htmlwidgets')
install.packages("htmlwidgets")
install.packages('ggiraph')
library(ggiraph)
library(ggiraph)
install.packages('ggplot2')
install.packages("ggplot2")
install.packages('ggplot2')
install.packages(c("osmdata", "osrm"))
library(sf)          # simple-features objects & spatial ops
library(ggmap)       # basemap tiles + ggplot2 integration
library(tidyverse)
library(ggthemes)    # extra ggplot2 themes (incl. theme_map)
library(osmdata)     # bounding boxes
library(tidygeocoder) # tidy-style geocoding (Nominatim by default)
library(ggrepel)
library(ggimage)     # drop-in PNG icons
library(showtext)
font_add_google("Alegreya Sans", "aleg")
font_add_google("Annie Use Your Telescope", "annie")
font_add_google("Pacifico", "pacifico")
showtext_auto()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
rlang::last_trace()
source("~/.active-rstudio-document", echo=TRUE)
library(shiny); runApp('shiny-exercise-1.R')
p_anim <- ggplot() +
geom_sf(data = us_states,
fill  = NA,        # thicker state borders
color = "grey60") +
geom_sf(data = human_counties_l,
aes(fill  = human_pct),
color = NA) +
coord_sf(                   # crop to 50-state bounding box
xlim   = c(bb["xmin"], bb["xmax"]),
ylim   = c(bb["ymin"], bb["ymax"]),
expand = FALSE) +
scale_fill_viridis_c(option = 'magma') +
theme_map() +
labs(subtitle = "Year: {floor(frame_time)}") +
transition_state(year)
library(sf)          # simple-features objects & spatial ops
library(ggmap)       # basemap tiles + ggplot2 integration
library(tidyverse)
library(ggthemes)    # extra ggplot2 themes (incl. theme_map)
library(osmdata)     # bounding boxes
library(tidygeocoder) # tidy-style geocoding (Nominatim by default)
library(ggrepel)
library(ggimage)     # drop-in PNG icons
library(showtext)
bb_routes <- st_bbox(routes)        # xmin, ymin, xmax, ymax (degrees)
source("C:/Users/peter/OneDrive/School_2024_25/Spring25/310/danl-310-hw4-peters-emily.R", echo=TRUE)
us_states <- states(
cb         = TRUE,   # use generalized cartographic boundary files
resolution = "5m",   # 1 : 5 000 000
year       = 2024    # 2024 vintage
) |>
shift_geometry()     # moves AK/HI & PR into a CONUS-friendly layout
us_counties <- counties(
state      = NULL,   # all states + DC + territories
cb         = TRUE,
resolution = "5m",
year       = 2024
) |>
shift_geometry()
main_states <- states(cb = TRUE, resolution = "5m", year = 2024)
keep <- state.abb                        # built-in vec of 50 state abbr.
bb <- sf::st_bbox(main_states)           # xmin / ymin / xmax / ymax vector
human <- climate_opinion |>
filter(variable == 'human')
human_counties <- us_counties |>
left_join(human, by = c("GEOID" = "GeoID"))
human_counties_l <- human_counties |>
rename(`2010` = x2010, `2011` = x2011,
`2012` = x2012, `2013` = x2013,
`2014` = x2014, `2015` = x2015,
`2016` = x2016, `2017` = x2017,
`2018` = x2018, `2019` = x2019,
`2020` = x2020, `2021` = x2021,
`2022` = x2022, `2023` = x2023,
`2024` = x2024) |>
pivot_longer(cols = c(`2010`,`2011`,`2012`,`2013`,`2014`,
`2015`,`2016`,`2017`,`2018`,`2019`,
`2020`,`2021`,`2022`,`2023`,`2024`),
names_to = 'year',
values_to = 'human_pct') |>
filter(year %in% c(2014, 2016, 2018, 2020, 2022,2024))
# Q3
p_anim <- ggplot() +
geom_sf(data = us_states,
fill  = NA,        # thicker state borders
color = "grey60") +
geom_sf(data = human_counties_l,
aes(fill  = human_pct),
color = NA) +
coord_sf(                   # crop to 50-state bounding box
xlim   = c(bb["xmin"], bb["xmax"]),
ylim   = c(bb["ymin"], bb["ymax"]),
expand = FALSE) +
scale_fill_viridis_c(option = 'magma') +
theme_map() +
labs(subtitle = "Year: {floor(frame_time)}") +
transition_state(year)
library(gganimate)   # turn static ggplots into animations
# Q3
p_anim <- ggplot() +
geom_sf(data = us_states,
fill  = NA,        # thicker state borders
color = "grey60") +
geom_sf(data = human_counties_l,
aes(fill  = human_pct),
color = NA) +
coord_sf(                   # crop to 50-state bounding box
xlim   = c(bb["xmin"], bb["xmax"]),
ylim   = c(bb["ymin"], bb["ymax"]),
expand = FALSE) +
scale_fill_viridis_c(option = 'magma') +
theme_map() +
labs(subtitle = "Year: {floor(frame_time)}") +
transition_state(year)
library(tidyverse)
library(sf)          # simple-features objects for spatial data
library(tigris)      # fast access to Census TIGER/Line shapefiles
library(ggthemes)
library(gganimate)   # turn static ggplots into animations
library(showtext)
# Q3
p_anim <- ggplot() +
geom_sf(data = us_states,
fill  = NA,        # thicker state borders
color = "grey60") +
geom_sf(data = human_counties_l,
aes(fill  = human_pct),
color = NA) +
coord_sf(                   # crop to 50-state bounding box
xlim   = c(bb["xmin"], bb["xmax"]),
ylim   = c(bb["ymin"], bb["ymax"]),
expand = FALSE) +
scale_fill_viridis_c(option = 'magma') +
theme_map() +
labs(subtitle = "Year: {floor(frame_time)}") +
transition_state(year)
# Q3
p_anim <- ggplot() +
geom_sf(data = us_states,
fill  = NA,        # thicker state borders
color = "grey60") +
geom_sf(data = human_counties_l,
aes(fill  = human_pct),
color = NA) +
coord_sf(                   # crop to 50-state bounding box
xlim   = c(bb["xmin"], bb["xmax"]),
ylim   = c(bb["ymin"], bb["ymax"]),
expand = FALSE) +
scale_fill_viridis_c(option = 'magma') +
theme_map() +
labs(subtitle = "Year: {floor(frame_time)}") +
transition_states(year)
anim <- animate(p_anim,
nframes = 20,
fps = 5,
width = 8, height = 5,
units = "in",
res = 300)  # resolution can be reduced
# To save animation as PATHNAME_FOR_YOUR_FILE.gif
anim_save('C:\\Users\\peter\\OneDrive\\School_2024_25\\Spring25\\310".gif', anim)
# To save animation as PATHNAME_FOR_YOUR_FILE.gif
anim_save('C:\\Users\\peter\\OneDrive\\School_2024_25\\Spring25\\310.gif', anim)
library(tidyverse)
e <- socviz::elections_historic
View(e)
e |>
select(election,winner,win_party)
flights <- nycflights13::flights
View(flights)
flight_data <-flights |>
filter(month == 1,
dest == "ORD")
View(flight_data)
reticulate::repl_python()
library(tidyverse)
svi <- read.csv("C:\\Users\\peter\\OneDrive\\School_2024_25\\Spring25\\410\\SVI2022_NEWYORK_tract.csv")
svi2 <- svi |>
select(COUNTY, E_TOTPOP, E_NOVEH, E_UNEMP, E_NOHSDP, E_UNINSUR,
E_AGE65, E_AGE17, E_DISABL, E_MINRTY, E_GROUPQ) |>
filter(COUNTY %in% c('Dutchess County', 'Lewis County', 'Livingston County', 'Madison County',
'Nassau County', 'Ontario County',
'Schoharie County', 'Tioga County',
'Ulster County', 'Wayne County', 'Wyoming County'),
E_TOTPOP >= 0,
E_NOVEH >= 0,
E_UNEMP >= 0,
E_NOHSDP >= 0,
E_UNINSUR >= 0,
E_AGE65 >= 0,
E_AGE17 >= 0,
E_DISABL >= 0,
E_MINRTY >= 0,
E_GROUPQ >= 0) |>
group_by(COUNTY) |>
summarize(C_TOTPOP = sum(E_TOTPOP),
C_NOVEH = sum(E_NOVEH),
C_UNEMP = sum(E_UNEMP),
C_NOHSDP = sum(E_NOHSDP),
C_UNINSUR = sum(E_UNINSUR),
C_AGE65 = sum(E_AGE65),
C_AGE17 = sum(E_AGE17),
C_DISABL = sum(E_DISABL),
C_MINRTY = sum(E_MINRTY)) |>
mutate(RATING = c("Sufficient","Unideal","Sufficient","Sufficient",
"Good","Unideal","Unideal","Unideal","Good","Sufficient","Unideal"))
svi3 <- svi2 |>
mutate(NOVEH = C_NOVEH/C_TOTPOP,
UNEMP = C_UNEMP/C_TOTPOP,
NOHSDP = C_NOHSDP/C_TOTPOP,
UNINSUR = C_UNINSUR/C_TOTPOP,
AGE65 = C_AGE65/C_TOTPOP,
AGE17 = C_AGE17/C_TOTPOP,
DISABL = C_DISABL/C_TOTPOP,
MINRTY = C_MINRTY/C_TOTPOP)
#| title: Populations of Each County
populations <- ggplot(data = svi2,
mapping = aes(x = fct_reorder(COUNTY,
C_TOTPOP),
y = C_TOTPOP))+
geom_col(fill = 'steelblue4')+
geom_text(aes(label = C_TOTPOP),
size = 2.5,
vjust = -.3)+
labs(x = "",
y = "County Population",
title = "Population of Each County",
subtitle = "Year: 2022")+
theme(axis.text.x = element_text(angle = 45,
hjust = 1,
face = 'bold'))
#| title: Populations of Each County
ggplot(data = svi2,
mapping = aes(x = fct_reorder(COUNTY,
C_TOTPOP),
y = C_TOTPOP))+
geom_col(fill = 'steelblue4')+
geom_text(aes(label = C_TOTPOP),
size = 2.5,
vjust = -.3)+
labs(x = "",
y = "County Population",
title = "Population of Each County",
subtitle = "Year: 2022")+
theme(axis.text.x = element_text(angle = 45,
hjust = 1,
face = 'bold'))
View(svi3)
#| title: SVI Factor Percentages for Unideal Counties
ggplot()+
geom_line(data = svi3_long |> filter(COUNTY %in% c('Lewis County', 'Schoharie County', 'Tioga County',
'Wyoming County')),
mapping = aes(x = PERC_TYPE,
y = PERC,
group = COUNTY,
color = COUNTY),
linewidth = 1.5)+
geom_point(data = svi3_long |> filter(COUNTY %in% c('Lewis County', 'Ontario County', 'Schoharie County', 'Tioga County',
'Wyoming County')),
mapping = aes(x = PERC_TYPE,
y = PERC))+
scale_color_viridis_d()+
labs(x = 'Social Vulnerability Factor',
y = 'Percentage',
title = 'Social Vulnerability Percentages',
subtitle = "Counties Classified Under 'Unideal' Public Transportation Services")+
theme(legend.position = "top",
axis.text.x = element_text(angle = 45,
hjust = 1,
face = 'bold'),
title = element_text(face = 'bold'))
library(tidyverse)
svi <- read.csv("C:\\Users\\peter\\OneDrive\\School_2024_25\\Spring25\\410\\SVI2022_NEWYORK_tract.csv")
svi2 <- svi |>
select(COUNTY, E_TOTPOP, E_NOVEH, E_UNEMP, E_NOHSDP, E_UNINSUR,
E_AGE65, E_AGE17, E_DISABL, E_MINRTY, E_GROUPQ) |>
filter(COUNTY %in% c('Dutchess County', 'Lewis County', 'Livingston County', 'Madison County',
'Nassau County', 'Ontario County',
'Schoharie County', 'Tioga County',
'Ulster County', 'Wayne County', 'Wyoming County'),
E_TOTPOP >= 0,
E_NOVEH >= 0,
E_UNEMP >= 0,
E_NOHSDP >= 0,
E_UNINSUR >= 0,
E_AGE65 >= 0,
E_AGE17 >= 0,
E_DISABL >= 0,
E_MINRTY >= 0,
E_GROUPQ >= 0) |>
group_by(COUNTY) |>
summarize(C_TOTPOP = sum(E_TOTPOP),
C_NOVEH = sum(E_NOVEH),
C_UNEMP = sum(E_UNEMP),
C_NOHSDP = sum(E_NOHSDP),
C_UNINSUR = sum(E_UNINSUR),
C_AGE65 = sum(E_AGE65),
C_AGE17 = sum(E_AGE17),
C_DISABL = sum(E_DISABL),
C_MINRTY = sum(E_MINRTY)) |>
mutate(RATING = c("Sufficient","Unideal","Sufficient","Sufficient",
"Good","Unideal","Unideal","Unideal","Good","Sufficient","Unideal"))
svi3 <- svi2 |>
mutate(NOVEH = C_NOVEH/C_TOTPOP,
UNEMP = C_UNEMP/C_TOTPOP,
NOHSDP = C_NOHSDP/C_TOTPOP,
UNINSUR = C_UNINSUR/C_TOTPOP,
AGE65 = C_AGE65/C_TOTPOP,
AGE17 = C_AGE17/C_TOTPOP,
DISABL = C_DISABL/C_TOTPOP,
MINRTY = C_MINRTY/C_TOTPOP)
svi3_long <- svi3 |>
select(COUNTY, NOVEH, UNEMP, NOHSDP,
UNINSUR, AGE65, AGE17,
DISABL, MINRTY) |>
pivot_longer(cols = c('NOVEH', 'UNEMP', 'NOHSDP',
'UNINSUR', 'AGE65', 'AGE17',
'DISABL', 'MINRTY'),
names_to = "PERC_TYPE",
values_to = "PERC")
#| title: SVI Factor Percentages for Unideal Counties
ggplot()+
geom_line(data = svi3_long |> filter(COUNTY %in% c('Lewis County', 'Schoharie County', 'Tioga County',
'Wyoming County')),
mapping = aes(x = PERC_TYPE,
y = PERC,
group = COUNTY,
color = COUNTY),
linewidth = 1.5)+
geom_point(data = svi3_long |> filter(COUNTY %in% c('Lewis County', 'Ontario County', 'Schoharie County', 'Tioga County',
'Wyoming County')),
mapping = aes(x = PERC_TYPE,
y = PERC))+
scale_color_viridis_d()+
labs(x = 'Social Vulnerability Factor',
y = 'Percentage',
title = 'Social Vulnerability Percentages',
subtitle = "Counties Classified Under 'Unideal' Public Transportation Services")+
theme(legend.position = "top",
axis.text.x = element_text(angle = 45,
hjust = 1,
face = 'bold'),
title = element_text(face = 'bold'))
#| title: SVI Factor Percentages for Sufficient Counties
ggplot(data = svi3_long |> filter(COUNTY %in% c('Dutchess County', 'Livingston County', 'Madison County', 'Wayne County')),
mapping = aes(x = PERC_TYPE,
y = PERC,
group = COUNTY))+
geom_line(aes(color = COUNTY),
linewidth = 1.5)+
geom_point()+
scale_color_tableau()+
labs(x = 'Social Vulnerability Factor',
y = 'Percentage',
title = 'Social Vulnerability Percentages',
subtitle = "Counties Classified Under 'Sufficient' Public Transportation Services")+
theme(legend.position = "top",
axis.text.x = element_text(angle = 45,
hjust = 1,
face = 'bold'),
title = element_text(face = 'bold'))
library(ggthemes)
#| title: SVI Factor Percentages for Sufficient Counties
ggplot(data = svi3_long |> filter(COUNTY %in% c('Dutchess County', 'Livingston County', 'Madison County', 'Wayne County')),
mapping = aes(x = PERC_TYPE,
y = PERC,
group = COUNTY))+
geom_line(aes(color = COUNTY),
linewidth = 1.5)+
geom_point()+
scale_color_tableau()+
labs(x = 'Social Vulnerability Factor',
y = 'Percentage',
title = 'Social Vulnerability Percentages',
subtitle = "Counties Classified Under 'Sufficient' Public Transportation Services")+
theme(legend.position = "top",
axis.text.x = element_text(angle = 45,
hjust = 1,
face = 'bold'),
title = element_text(face = 'bold'))
#| title: SVI Factor Percentages for Good Counties
ggplot(data = svi3_long |> filter(COUNTY %in% c('Ontario County','Nassau County', 'Ulster County')),
mapping = aes(x = PERC_TYPE,
y = PERC,
group = COUNTY))+
geom_line(aes(color = COUNTY),
linewidth = 1.5)+
geom_point()+
scale_color_manual(values = c('grey30', 'darkgreen', 'purple4'))+
labs(x = 'Social Vulnerability Factor',
y = 'Percentage',
title = 'Social Vulnerability Percentages',
subtitle = "Counties Classified Under 'Good' Public Transportation Services")+
theme(legend.position = "top",
axis.text.x = element_text(angle = 45,
hjust = 1,
face = 'bold'),
title = element_text(face = 'bold'))
#| content: valuebox
#| title: "Highest % Without Vehicle"
highest_noveh <- svi3 |>
arrange(desc(NOVEH)) |>
highest_noveh[1]
#| content: valuebox
#| title: "Highest % Without Vehicle"
highest_noveh <- svi3 |>
arrange(desc(NOVEH)) |>
[1]
#| content: valuebox
#| title: "Highest % Without Vehicle"
highest_noveh <- svi3 |>
arrange(desc(NOVEH)) #|>
list(
icon = "car-slash",
color = "danger",
value = highest_noveh$NOVEH
)
View(highest_noveh)
#| content: valuebox
#| title: "Highest % Without Vehicle"
highest_noveh <- svi3 |>
arrange(desc(NOVEH)) |>
filter(COUNTY == "Wyoming")
list(
icon = "car-slash",
color = "danger",
value = highest_noveh$NOVEH
)
View(highest_noveh)
#| content: valuebox
#| title: "Highest % Without Vehicle"
highest_noveh <- svi3 |>
arrange(desc(NOVEH))
list(
icon = "car-slash",
color = "danger",
value = highest_noveh$NOVEH
)
View(highest_noveh)
#| content: valuebox
#| title: "Highest % Without Vehicle"
highest_noveh <- svi3 |>
arrange(desc(NOVEH)) |>
filter(COUNTY == "Wyoming County")
list(
icon = "car-slash",
color = "danger",
value = highest_noveh$NOVEH
)
#| content: valuebox
#| title: "Highest Unemployment %"
highest_unemp <- svi3 |>
arrange(desc(UNEMP)) #|>
#filter(COUNTY == "")
list(
icon = "briefcase",
color = "warning",
value = paste0(highest_unemp$COUNTY, ": ", scales::percent(highest_unemp$UNEMP))
)
View(highest_unemp)
View(highest_noveh)
View(svi2)
