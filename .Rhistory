install.packages("reticulate")
getwd()
library(gapminder)
gapminder <- gapminder::gapminder
library(skimr)
skim(gapminder)
library(tidyverse)
p <- ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point() + geom_smooth
p +
geom_point() +
geom_smooth()
library(tidyverse)
p <- ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point()
#assign color to a variable gives different colors for each different value in that variable
p1 <-  ggplot(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp,
color = continent))
p1 + geom_point()
p1 + geom_point() +
geom_smooth(method = 'lm')
p2 <- ggplot(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp))
p2 <- ggplot(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp))
p2 + geom_point(color = "purple") +
geom_smooth(method = "lm")
p2 + geom_point(color = "purple") +
geom_smooth()
p2 + geom_point(color = "purple") +
geom_smooth(color = "yellow")
p2 + geom_point(color = "purple") +
geom_smooth(color = "red", method = "loess")
p2 + geom_point(color = "purple") +
geom_smooth(color = "red", method = "loess", se = F, size = 8)
View(gapminder)
library(tidyverse)
mpg <- mpg
ggplot(data = mpg) +
geom_point(mapping =
aes(x = displ,
y = hwy,
color = class) )
ggplot(data = mpg,
aes(x=displ, y= hwy)) +
geom_point(alpha = .3)
ggplot(data = mpg,
aes(x=displ, y= hwy)) +
geom_point(color = 'blue' )
ggplot(data = mpg,
mapping = aes(x = displ,
y = hwy,
color = class))+
geom_point()+
geom_smooth
ggplot(data = mpg,
mapping = aes(x = displ,
y = hwy,
color = class))+
geom_point()+
geom_smooth()
ggplot(data = mpg,
mapping = aes(x = displ,
y = hwy))+
geom_point(color = class)+
geom_smooth(se = F)
ggplot(data = mpg,
mapping = aes(x = displ,
y = hwy))+
geom_point()+
geom_smooth(se = F)
#facets
#single variable:
ggplot(data = mpg) +
geom_point(mapping =
aes(x = displ,
y = hwy),
alpha = .5) +
facet_wrap( . ~ class, nrow = 2)
#facet grid:
#facet_grid(<var_row> ~ <var_col>)
ggplot(data = mpg) +
geom_point(mapping =
aes(x = displ,
y = hwy),
alpha = .5) +
facet_grid(drv ~ cyl)
#facet vs color
ggplot(data = mpg,
mapping=aes(x=displ,y=hwy)) +
geom_point(alpha = .5)+
geom_smooth(method = lm)+
facet_wrap(~ class)
ggplot(data = mpg,
mapping=aes(x=displ,y=hwy,color=class)) +
geom_point(alpha = .5)+
geom_smooth(method = lm)
ggplot(data = mpg,
mapping=aes(x=displ,y=hwy,color=class)) +
geom_point(alpha = .5)+
geom_smooth(method = lm, se=F)
#local aes mapping:
ggplot(data = mpg) +
geom_point(mapping =
aes(x = displ,
y = hwy),
alpha = .3) +
geom_smooth(mapping =
aes(x = displ,
y = hwy)) +
geom_smooth(mapping =
aes(x = displ,
y = hwy),
method = lm,
color = 'red')
#global aes mapping:
ggplot(data = mpg,
mapping =
aes(x = displ,
y = hwy)) +
geom_point(mapping =
aes(color = class),
alpha = .3) +
geom_smooth()
```{r}
#statistical transformation
#bar, histogram, freqpoly measure frequency by bins
ggplot(diamonds) +
geom_histogram(aes(x = price))
#statistical transformation
#bar, histogram, freqpoly measure frequency by bins
ggplot(diamonds) +
geom_histogram(aes(x = price, bins=100))
#statistical transformation
#bar, histogram, freqpoly measure frequency by bins
ggplot(diamonds) +
geom_histogram(aes(x = price))
#statistical transformation
#bar, histogram, freqpoly measure frequency by bins
ggplot(diamonds,aes(x = price)) +
geom_histogram(color='steelblue',
fill = 'white',
bins = 100)
#statistical transformation
#bar, histogram, freqpoly measure frequency by bins
ggplot(diamonds,aes(x = price)) +
geom_histogram(color= cut,
bins = 100)
#statistical transformation
#bar, histogram, freqpoly measure frequency by bins
ggplot(diamonds,aes(x = price, color=cut)) +
geom_histogram(bins = 100)
```{r}
#statistical transformation
#bar, histogram, freqpoly measure frequency by bins
ggplot(diamonds,aes(x = price)) +
geom_histogram(color='steelblue',
bins = 100)
#freqpoly: line version of histogram
#takes same arguments as histogram
ggplot(diamonds) +
geom_freqpoly(aes(x = price, color = cut),
bins = 200)
#freqpoly: line version of histogram
#takes same arguments as histogram
ggplot(diamonds) +
geom_freqpoly(aes(x = price, color = cut),
bins = 200)+
facet_wrap(~ cut)
#Log functions
sale_df <- read_csv(
"https://bcdanl.github.io/data/home_sales_nyc.csv")
library(tidyverse)
mpg <- mpg
ggplot(data = mpg,
mapping = aes(x = displ,
y = hwy))+
geom_point(alpha = .5)+
geom_smooth(color='blue')
ggplot(data = mpg,
mapping = aes(x = displ,
y = hwy))+
geom_point(alpha = .5)+
geom_smooth(color='blue',se = F)
ggplot(data = mpg,
mapping = aes(x = displ,
y = hwy))+
geom_point(alpha = .4)+
geom_smooth(color='blue',se = F)
#Q2b
flights <- nycflights13::flights
airlines <- nycflights13::airlines
flights <- flights |>
left_join(airlines)
View(flights)
ggplot(data = flights,
mapping=aes(x = carrier))+
geom_bar()
ggplot(data = flights,
mapping=aes(y = name))+
geom_bar()
airlines_n <- flights |>
count(name)
ggplot(airlines_n)+
geom_col(aes(x=n,
y=fct_reorder(name,n)))
ggplot(data = flights,
mapping=aes(y = name))+
geom_bar()+
facet_wrap(~origin)
#This solved the problem of overlapping names on the x axis
ggplot(data = flights,
mapping=aes(y = name))+
geom_bar(fill=origin)
ggplot(data = flights)+
geom_bar(aes(y = name,fill=origin))
library(gapminder)
gapminder <- gapminder::gapminder
View(gapminder)
library(gapminder)
p <- ggplot(data = gapminder,
mapping =
aes( x = year,
y = gdpPercap ) )
p +
geom_line()
library(gapminder)
p <- ggplot(data = gapminder,
mapping =
aes( x = year,
y = gdpPercap ) )
p +
geom_line()+
geom_point()
library(gapminder)
p <- ggplot(data = gapminder,
mapping =
aes( x = year,
y = gdpPercap,
group = country) )
p +
geom_line()
library(tidyverse)
library(gapminder)
gapminder <- gapminder::gapminder
library(tidyverse)
library(gapminder)
gapminder <- gapminder::gapminder
view(gapminder)
library(tidyverse)
library(gapminder)
gapminder <- gapminder::gapminder
view(gapminder)
ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp))+
geom_point()
ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp))+
geom_point()+
geom_smooth()
ggplot(data = gapminder,
mapping = aes(x = year,
y = gpdPercap))+
geom_line()
ggplot(data = gapminder,
mapping = aes(x = year,
y = gdpPercap))+
geom_line()
g <- gapminder |>
filter(country %in% 'United States')
View(g)
ggplot(data = g,
mapping = aes(x = year,
y = gdpPercap))+
geom_line()
ggplot(data = gapminder,
mapping = aes(x = continent))+
geom_bar
ggplot(data = gapminder,
mapping = aes(x = continent))+
geom_bar()
View(g)
gdp <- gapminder |>
filter(year %in% 2007)
ggplot(data = gdp,
mapping = aes(x = gdpPercap))+
geom_boxplot()
ggplot(data = gapminder,
mapping = aes(x = continent))+
geom_bar(aes(color = continent))
ggplot(data = gapminder,
mapping = aes(x = continent))+
geom_bar(aes(fill = continent))
ggplot(data = gapminder,
mapping = aes(x = continent))+
geom_bar(aes(color = country))
ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp))+
geom_point(aes(color = continent))
ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp,
alpha = .1))+
geom_point(aes(color = continent))
ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp,
alpha = .5))+
geom_point(aes(color = continent))
ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp))+
geom_point(aes(color = continent,
alpha = .1))
ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp))+
geom_point(aes(color = continent,
alpha = .5))
ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp))+
geom_point(aes(color = continent,
alpha = .9))
ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp))+
geom_point(aes(color = continent,
alpha = .07))
ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp))+
geom_point(aes(color = continent,
alpha = .04))
ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp))+
geom_point(aes(color = continent))+
facet_wrap(~continent)
ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp))+
geom_point()+
facet_wrap(~continent)+
geom_smooth()
ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp))+
geom_point()+
facet_wrap(~continent)+
geom_smooth()+
labs(x = "GDP Per Capita",
y = "Life Expectancy in Years",
title = "GDP and Life Expectancy Throughout the World",
subtitle = "Years 1952 Through 2007",
caption = "Source: Gapminder.")
