#describing the relationship between fate and percent
p <- ggplot(data = titanic,
mapping =
aes(x = fate,
y = percent,
fill = sex))
p +
geom_bar(position = "dodge",
stat = "identity") +
theme(legend.position = "top")
oecd_sum
p <- ggplot(data = socviz::oecd_sum,
mapping =
aes(x = year,
y = diff,
fill = hi_lo))
p +
geom_col() +
guides(fill = "none") +
labs(x = NULL,
y = "Difference in Years",
title = "The US Life Expectancy Gap",
subtitle = "Difference between US and OECD
average life expectancies, 1960-2015",
caption = "Data: OECD. After a chart by Christopher Ingraham,
Washington Post, December 27th 2017.") +
theme_minimal()
ncdc_temp <- read_csv(
'https://bcdanl.github.io/data/ncdc_temp_cleaned.csv')
library(tidyverse)
ncdc_temp <- read_csv(
'https://bcdanl.github.io/data/ncdc_temp_cleaned.csv')
View(ncdc_temp)
ggplot(data = ncdc_temp,
mapping = aes(x = month,
y = temperature))+
geom_point()+
geom_line(color = location)
ggplot(data = ncdc_temp,
mapping = aes(x = month,
y = temperature))+
geom_point()
ggplot(data = ncdc_temp,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_point()+
geom_line()
library(gapminder)
p <- ggplot(data = gapminder,
mapping =
aes( x = year,
y = gdpPercap,
group = country) ) #makes it so that each country gets its own line
p +
geom_line()
gapminder |>
filter(country %in% c('United States','United Kingdom','China','Japan','Canada')) |> #you can connect transformed df to a ggplot with pipe operator
ggplot(aes(x=year,
y=log(gdpPercap),
color=country))+
geom_point(color='black')+
geom_line()
ggplot(data = ncdc_temp,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_line()+
geom_point()
ggplot(data = ncdc_temp,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_line()+
geom_point(color = 'black')
View(ncdc_temp)
q1 <- ncdc_temp |>
filter(day %in% 1)
View(q1)
ggplot(data = q1,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_line()+
geom_point(color = 'black')
q1 <- ncdc_temp |>
filter(day %in% 1)
ggplot(data = q1,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_line()
q1 <- ncdc_temp |>
filter(day %in% 1)
ggplot(data = q1,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_point(color = 'black')+
geom_line()
q1 <- ncdc_temp |>
filter(day %in% 1)
ggplot(data = q1,
mapping = aes(x = month,
y = temperature))+
geom_point(color = 'black')+
geom_line(aes(color = location))
q1 <- ncdc_temp |>
filter(day %in% 1)
ggplot(data = q1,
mapping = aes(x = month,
y = temperature, group = location))+
geom_point(color = 'black')+
geom_line(aes(color = location))
q1 <- ncdc_temp |>
filter(day %in% 1)|>
filter(month %in% c(01,04,07,10,))
q1 <- ncdc_temp |>
filter(day %in% 1)|>
filter(month %in% c(01,04,07,10))
ggplot(data = q1,
mapping = aes(x = month,
y = temperature, group = location))+
geom_point(color = 'black')+
geom_line(aes(color = location))
q1 <- ncdc_temp |>
filter(day %in% 1)
q1 <- ncdc_temp |>
filter(day %in% 1)
ggplot(data = q1,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_line()
q1 <- ncdc_temp |>
filter(day %in% 1)
ggplot(data = q1)+
geom_line(mapping = aes(x = month,
y = temperature,
color = location))+
geom_point(color = 'black')
q1 <- ncdc_temp |>
filter(day %in% 1)
ggplot(data = q1,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_line()+
geom_point(color = 'black')
p +
geom_line(color="gray70",
aes(group = country)) +
geom_smooth(size = 1.1,
method = "loess",
se = FALSE) +
facet_wrap(.~ continent, nrow = 1) +
scale_y_log10(labels=scales::dollar) +
labs(x = "Year",
y = "GDP per capita",
title = "GDP per capita on Five Continents")+
theme(axis.text.x =
element_text(
angle = 45), #avoid overlapping x labels
axis.title.x = element_text(margin = margin(t = 25))) #can give up to 4 values, and do for y also
q1 <- ncdc_temp |>
filter(day %in% 1)
ggplot(data = q1,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_line(group = location)+
geom_point(color = 'black')
q1 <- ncdc_temp |>
filter(day %in% 1)
ggplot(data = q1,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_line(aes(group = location)+
geom_point(color = 'black')
q1 <- ncdc_temp |>
filter(day %in% 1)
ggplot(data = q1,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_line(aes(group = location))+
geom_point(color = 'black')
q1 <- ncdc_temp |>
filter(day == 1, month %in% c(01,04,07,10))
q1 <- ncdc_temp |>
filter(day == 1, month %in% c(1,4,7,10))
q1 <- ncdc_temp |>
filter(day == 1, month %in% c('01','04','07','10'))
q1 <- ncdc_temp |>
filter(day == 1, month %in% c('01','04','07','10'))
ggplot(data = q1,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_line(aes(group = location))+
geom_point(color = 'black')
q1 <- ncdc_temp |>
filter(day == 1)
ggplot(data = q1,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_line(aes(group = location))+
geom_point(color = 'black')
q1 <- ncdc_temp |>
filter(day == 1, month %in% c('01','04','07','10'))
ggplot(data = q1,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_smooth(aes(group = location))+
geom_point(color = 'black')
q1 <- ncdc_temp |>
filter(day == 1)
ggplot(data = q1,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_smooth(aes(group = location))+
geom_point(color = 'black')
q1 <- ncdc_temp |>
filter(day == 1)
ggplot(data = q1,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_smooth(aes(group = location), se = F)+
geom_point(color = 'black')
q1 <- ncdc_temp |>
filter(day == 1)
ggplot(data = q1,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_dense(aes(group = location))+
geom_point(color = 'black')
q1 <- ncdc_temp |>
filter(day == 1)
ggplot(data = q1,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_density(aes(group = location))+
geom_point(color = 'black')
q1 <- ncdc_temp |>
filter(day == 1)
ggplot(data = q1,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_smooth(aes(group = location), se=F)+
geom_point(color = 'black')
q1 <- ncdc_temp |>
filter(day == 1)
ggplot(data = q1,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_smooth(aes(group = location), se=F, method = loess)+
geom_point(color = 'black')
q1 <- ncdc_temp |>
filter(day == 1)
ggplot(data = q1,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_smooth(aes(group = location), se=F, method = 'gam')+
geom_point(color = 'black')
q1 <- ncdc_temp |>
filter(day == 1)
ggplot(data = q1,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_smooth(aes(group = location), se=F, method = 'loess')+
geom_point(color = 'black')
q1 <- ncdc_temp |>
filter(day == 1)
ggplot(data = q1,
mapping = aes(x = month,
y = temperature,
color = location))+
geom_smooth(aes(group = location), se=F, method = 'gam')+
geom_point(color = 'black')
reticulate::repl_python()
gss_sm <-  socviz::gss_sm
bigregion_religion |>
select(id, bigregion, religion)
library(tidyverse)
bigregion_religion |>
select(id, bigregion, religion)
library(tidyverse)
bigregion_religion <- gss_sm |>
select(id, bigregion, religion)
library(tidyverse)
bigregion_religion <- gss_sm |>
select(id, bigregion, religion) |>
arrange(bigregion, religion, id) |>
group_by(bigregion, religion)
bigregion_religion
library(tidyverse)
bigregion_religion <- gss_sm |>
select(id, bigregion, religion) |>
arrange(bigregion, religion, id) |>
group_by(bigregion, religion) |>
summarize(n = n()) #counts # of observatoins for each group
library(tidyverse)
bigregion_religion <- gss_sm |>
select(id, bigregion, religion) |>
arrange(bigregion, religion, id) |>
group_by(bigregion, religion) |>
summarize(n = n()) #counts # of observatoins for each group
bigregion_religion
bigregion_religion2 <- gss_sm |>
select(id, bigregion, religion) |>
arrange(bigregion, religion, id) |>
group_by(bigregion, religion) |>
summarize(n = n()) |>
mutate(tot = sum(n)) |> # sum is calculated for each region
mutate(percentage = (n/tot)*100)
View(bigregion_religion2)
p <- ggplot( bigregion_religion2,
aes( x = bigregion,
y = percentage,
fill = religion))
p + geom_bar( stat = identity,
position = "dodge2" ) +
labs(x = "Region",
y = "Percent",
fill = "Religion") +
theme(legend.position
= "top")
p <- ggplot( bigregion_religion2,
aes( x = bigregion,
y = percentage,
fill = religion))
p + geom_col(
position = "dodge2" ) +
labs(x = "Region",
y = "Percent",
fill = "Religion") +
theme(legend.position
= "top")
p <- ggplot( bigregion_religion2,
aes( x = bigregion,
y = percentage,
fill = religion))
p + geom_col(
position = "dodge2" ) +
labs(x = "",
y = "Percent",
fill = "Religion") +
theme(legend.position
= "top")
p <- ggplot( bigregion_religion2,
aes( x = bigregion,
y = percentage,
fill = religion))
p + geom_col(
position = "dodge2" ) +
labs(x = "",
y = "",
fill = "Religion") +
scale_y_continuous(labels = scales::percent)
theme(legend.position
= "top")
ggplot(gss_sm,
mapping = aes(y = religion,
fill = religion))+
geom_bar()+
facet_wrap(~ bigregion)
ggplot(gss_sm,
mapping = aes(y = religion,
fill = religion))+
geom_bar()+
facet_wrap(~ bigregion,
col = 4)
ggplot(gss_sm,
mapping = aes(y = religion,
fill = religion))+
geom_bar()+
facet_wrap(~ bigregion, aes(col=4))
ggplot(gss_sm,
mapping = aes(y = religion,
fill = religion))+
geom_bar()+
facet_wrap(~ bigregion, aes(nrow=1))
ggplot(bigregion_religion2,
mapping = aes(x = percentage,
y = reigion,
fill = religion))+
geom_col()+
facet_wrap(~ bigregion,
nrow=1)
ggplot(bigregion_religion2,
mapping = aes(x = percentage,
y = religion,
fill = religion))+
geom_col()+
facet_wrap(~ bigregion,
nrow=1)
ggplot(bigregion_religion2,
mapping = aes(x = percentage,
y = religion,
fill = religion))+
geom_col(show.legend=F)+
facet_wrap(~ bigregion,
nrow=1)+
labs(x = 'Religion',
y = '')+
scale_y_coninuous(labels = scales::percent)
ggplot(bigregion_religion2,
mapping = aes(x = percentage,
y = religion,
fill = religion))+
geom_col(show.legend=F)+
facet_wrap(~ bigregion,
nrow=1)+
labs(x = 'Religion',
y = '')+
scale_y_continuous(labels = scales::percent)
ggplot(bigregion_religion2,
mapping = aes(x = percentage,
y = religion,
fill = religion))+
geom_col(show.legend=F)+
facet_wrap(~ bigregion,
nrow=1)+
labs(x = 'Religion',
y = '')+
scale_y_continuous(labels = scales::percent)
ggplot(bigregion_religion2,
mapping = aes(x = percentage,
y = religion,
fill = religion))+
geom_col(show.legend=F)+
facet_wrap(~ bigregion,
nrow=1)+
labs(x = 'Religion',
y = 'Percent')
ggplot(bigregion_religion2,
mapping = aes(x = percentage,
y = religion,
fill = religion))+
geom_col(show.legend=F)+
facet_wrap(~ bigregion,
nrow=1)+
labs(x = 'Percent',
y = 'Religion')
organ <- socviz::organdata
organdata <- socviz::organdata
ggplot(data = organdata,
mapping = aes(x = donors,
y = country))+
geom_boxplot
ggplot(data = organdata,
mapping = aes(x = donors,
y = country))+
geom_boxplot()
#better way: order by amount of donors
#ftc reorder lets you reorder observations based on a variable's value
organdata <- organdata |>
mutate(country =
fct_reorder(country,
donors, na.rm = T) )
organdata
levels(organdata$country)
p <- ggplot(data = organdata,
mapping =
aes(x = country,
y = donors))
p + geom_boxplot() +
labs(x = NULL) +
coord_flip()
#add color to show variable world
p <- ggplot(data = organdata,
mapping =
aes(x =
fct_reorder(
country,
donors,
na.rm=TRUE),
y = donors,
fill = world))
p + geom_boxplot() +
labs(x=NULL) +
coord_flip() +
theme(legend.position = "top")
organdata <- socviz::organdata
DT::datatable(organdata)
View(organdata)
#better way: order by amount of donors
#ftc reorder lets you reorder observations based on a variable's value (default is ascending order)
organdata <- organdata |>
mutate(country =
fct_reorder(country, #categorical variable ordered by ...
donors, #numerical value
na.rm = T) )
#na.rm = T removes an NA donor values from country
organdata
# you can use stats within fct_reorder. Syntax:
#fct_reorder(
#categorical,
#numerical,
#statistic
#)
